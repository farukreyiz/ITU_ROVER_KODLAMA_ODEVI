
rover_dc_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f10  08008f10  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f18  08008f18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000988  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a04  20000a04  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019635  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003de6  00000000  00000000  00039724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001670  00000000  00000000  0003d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001159  00000000  00000000  0003eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024336  00000000  00000000  0003fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d27a  00000000  00000000  0006400f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3753  00000000  00000000  00081289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000628c  00000000  00000000  001549dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0015ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008edc 	.word	0x08008edc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008edc 	.word	0x08008edc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fd58 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f88c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9fe 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8f2 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f91e 	bl	8000718 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f94c 	bl	8000778 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f008 f8a8 	bl	8008634 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e4:	f000 f97e 	bl	80007e4 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f008 f8ca 	bl	8008680 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);                             //PWM sinyalini başlatıyorum.
 80004ec:	2104      	movs	r1, #4
 80004ee:	483b      	ldr	r0, [pc, #236]	; (80005dc <main+0x118>)
 80004f0:	f004 f99e 	bl	8004830 <HAL_TIM_PWM_Start>

    if(HAL_GPIO_ReadPin(buton1_GPIO_Port, buton1_Pin) == 1)               // 1. butona basılırsa aşağıdaki komutlar gerçekleşecek.
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	4839      	ldr	r0, [pc, #228]	; (80005e0 <main+0x11c>)
 80004fa:	f001 f883 	bl	8001604 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10f      	bne.n	8000524 <main+0x60>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1000);                //Duty cycle'yi %100'e ayarlıyorum. (AutoReload Register'ın değeri 1000'di.)
 8000504:	4b35      	ldr	r3, [pc, #212]	; (80005dc <main+0x118>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050c:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_GPIO_WritePin(motor1_GPIO_Port, motor1_Pin, GPIO_PIN_SET);    //DC motorun bağlı olduğu birinci kabloyu lojik-1 yapıyorum.
 800050e:	2201      	movs	r2, #1
 8000510:	2104      	movs	r1, #4
 8000512:	4834      	ldr	r0, [pc, #208]	; (80005e4 <main+0x120>)
 8000514:	f001 f88e 	bl	8001634 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(motor2_GPIO_Port, motor2_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu ikinci kabloyu lojik-0 yapıyorum.
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	4831      	ldr	r0, [pc, #196]	; (80005e4 <main+0x120>)
 800051e:	f001 f889 	bl	8001634 <HAL_GPIO_WritePin>
 8000522:	e7e1      	b.n	80004e8 <main+0x24>
    }

    else if(HAL_GPIO_ReadPin(buton2_GPIO_Port, buton2_Pin) == 1)          // 2. butona basılırsa aşağıdaki komutlar gerçekleşecek.
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	482d      	ldr	r0, [pc, #180]	; (80005e0 <main+0x11c>)
 800052a:	f001 f86b 	bl	8001604 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10f      	bne.n	8000554 <main+0x90>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,500);                 //Duty cycle'yi %50'ye ayarlıyorum. (AutoReload Register'ın değeri 1000'di.)
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <main+0x118>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800053c:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_GPIO_WritePin(motor1_GPIO_Port, motor1_Pin, GPIO_PIN_SET);    //DC motorun bağlı olduğu birinci kabloyu lojik-1 yapıyorum.
 800053e:	2201      	movs	r2, #1
 8000540:	2104      	movs	r1, #4
 8000542:	4828      	ldr	r0, [pc, #160]	; (80005e4 <main+0x120>)
 8000544:	f001 f876 	bl	8001634 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(motor2_GPIO_Port, motor2_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu ikinci kabloyu lojik-0 yapıyorum.
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <main+0x120>)
 800054e:	f001 f871 	bl	8001634 <HAL_GPIO_WritePin>
 8000552:	e7c9      	b.n	80004e8 <main+0x24>
    }

    else if(HAL_GPIO_ReadPin(buton3_GPIO_Port, buton3_Pin) == 1)          // 3. butona basılırsa aşağıdaki komutlar gerçekleşecek.
 8000554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000558:	4821      	ldr	r0, [pc, #132]	; (80005e0 <main+0x11c>)
 800055a:	f001 f853 	bl	8001604 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10a      	bne.n	800057a <main+0xb6>
    {
    	HAL_GPIO_WritePin(motor1_GPIO_Port, motor1_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu birinci kabloyu lojik-0 yapıyorum.
 8000564:	2200      	movs	r2, #0
 8000566:	2104      	movs	r1, #4
 8000568:	481e      	ldr	r0, [pc, #120]	; (80005e4 <main+0x120>)
 800056a:	f001 f863 	bl	8001634 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(motor2_GPIO_Port, motor2_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu ikinci kabloyu lojik-0 yapıyorum. Böylece motor duracak.
 800056e:	2200      	movs	r2, #0
 8000570:	2108      	movs	r1, #8
 8000572:	481c      	ldr	r0, [pc, #112]	; (80005e4 <main+0x120>)
 8000574:	f001 f85e 	bl	8001634 <HAL_GPIO_WritePin>
 8000578:	e7b6      	b.n	80004e8 <main+0x24>
    }

    else if(HAL_GPIO_ReadPin(buton4_GPIO_Port, buton4_Pin) == 1)          // 4. butona basılırsa aşağıdaki komutlar gerçekleşecek.
 800057a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057e:	4818      	ldr	r0, [pc, #96]	; (80005e0 <main+0x11c>)
 8000580:	f001 f840 	bl	8001604 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d10f      	bne.n	80005aa <main+0xe6>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,500);                 //Duty cycle'yi %50'ye ayarlıyorum. (AutoReload Register'ın değeri 1000'di.)
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0x118>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000592:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_GPIO_WritePin(motor1_GPIO_Port, motor1_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu birinci kabloyu lojik-0 yapıyorum.
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <main+0x120>)
 800059a:	f001 f84b 	bl	8001634 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(motor2_GPIO_Port, motor2_Pin, GPIO_PIN_SET);    //DC motorun bağlı olduğu ikinci kabloyu lojik-1 yapıyorum. Böylece motor ilk iki koşulda döndüğü yönün tersine dönecek.
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	4810      	ldr	r0, [pc, #64]	; (80005e4 <main+0x120>)
 80005a4:	f001 f846 	bl	8001634 <HAL_GPIO_WritePin>
 80005a8:	e79e      	b.n	80004e8 <main+0x24>
    }

    else if(HAL_GPIO_ReadPin(buton5_GPIO_Port, buton5_Pin) == 1)          // 5. butona basılırsa aşağıdaki komutlar gerçekleşecek.
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x11c>)
 80005b0:	f001 f828 	bl	8001604 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d196      	bne.n	80004e8 <main+0x24>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1000);                //Duty cycle'yi %100'e ayarlıyorum. (AutoReload Register'ın değeri 1000'di.)
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <main+0x118>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_GPIO_WritePin(motor1_GPIO_Port, motor1_Pin, GPIO_PIN_RESET);  //DC motorun bağlı olduğu birinci kabloyu lojik-0 yapıyorum.
 80005c4:	2200      	movs	r2, #0
 80005c6:	2104      	movs	r1, #4
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x120>)
 80005ca:	f001 f833 	bl	8001634 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(motor2_GPIO_Port, motor2_Pin, GPIO_PIN_SET);    //DC motorun bağlı olduğu ikinci kabloyu lojik-1 yapıyorum. Böylece motor ilk iki koşulda döndüğü yönün tersine dönecek.
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <main+0x120>)
 80005d4:	f001 f82e 	bl	8001634 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80005d8:	e786      	b.n	80004e8 <main+0x24>
 80005da:	bf00      	nop
 80005dc:	2000018c 	.word	0x2000018c
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fbe0 	bl	8008dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f9e8 	bl	8003a44 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 fa33 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fc49 	bl	8003f34 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 fa1c 	bl	8000ae4 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f002 fbbf 	bl	8002e7c <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f9ee 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000098 	.word	0x20000098
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_I2S3_Init+0x54>)
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_I2S3_Init+0x58>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_I2S3_Init+0x54>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_I2S3_Init+0x54>)
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <MX_I2S3_Init+0x5c>)
 8000742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2S3_Init+0x54>)
 8000758:	f002 fcd4 	bl	8003104 <HAL_I2S_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 f9bf 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000ec 	.word	0x200000ec
 8000770:	40003c00 	.word	0x40003c00
 8000774:	00017700 	.word	0x00017700

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI1_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI1_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ca:	f003 feff 	bl	80045cc <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f986 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000134 	.word	0x20000134
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_TIM2_Init+0xe8>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_TIM2_Init+0xe8>)
 800081e:	2253      	movs	r2, #83	; 0x53
 8000820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_TIM2_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_TIM2_Init+0xe8>)
 800082a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800082e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_TIM2_Init+0xe8>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_TIM2_Init+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <MX_TIM2_Init+0xe8>)
 800083e:	f003 ff4e 	bl	80046de <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000848:	f000 f94c 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	4619      	mov	r1, r3
 8000858:	481c      	ldr	r0, [pc, #112]	; (80008cc <MX_TIM2_Init+0xe8>)
 800085a:	f004 fa7b 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000864:	f000 f93e 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_TIM2_Init+0xe8>)
 800086a:	f003 ff87 	bl	800477c <HAL_TIM_PWM_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000874:	f000 f936 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4619      	mov	r1, r3
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_TIM2_Init+0xe8>)
 8000888:	f004 fe6e 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000892:	f000 f927 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	2360      	movs	r3, #96	; 0x60
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2204      	movs	r2, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_TIM2_Init+0xe8>)
 80008ae:	f004 f98f 	bl	8004bd0 <HAL_TIM_PWM_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008b8:	f000 f914 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_TIM2_Init+0xe8>)
 80008be:	f000 fa75 	bl	8000dac <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3738      	adds	r7, #56	; 0x38
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000018c 	.word	0x2000018c

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	4b78      	ldr	r3, [pc, #480]	; (8000acc <MX_GPIO_Init+0x1fc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a77      	ldr	r2, [pc, #476]	; (8000acc <MX_GPIO_Init+0x1fc>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b75      	ldr	r3, [pc, #468]	; (8000acc <MX_GPIO_Init+0x1fc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b71      	ldr	r3, [pc, #452]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a70      	ldr	r2, [pc, #448]	; (8000acc <MX_GPIO_Init+0x1fc>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b6e      	ldr	r3, [pc, #440]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a69      	ldr	r2, [pc, #420]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b67      	ldr	r3, [pc, #412]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b63      	ldr	r3, [pc, #396]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a62      	ldr	r2, [pc, #392]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <MX_GPIO_Init+0x1fc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b5c      	ldr	r3, [pc, #368]	; (8000acc <MX_GPIO_Init+0x1fc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a5b      	ldr	r2, [pc, #364]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b59      	ldr	r3, [pc, #356]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b55      	ldr	r3, [pc, #340]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a54      	ldr	r2, [pc, #336]	; (8000acc <MX_GPIO_Init+0x1fc>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b52      	ldr	r3, [pc, #328]	; (8000acc <MX_GPIO_Init+0x1fc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	484f      	ldr	r0, [pc, #316]	; (8000ad0 <MX_GPIO_Init+0x200>)
 8000994:	f000 fe4e 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	484d      	ldr	r0, [pc, #308]	; (8000ad4 <MX_GPIO_Init+0x204>)
 800099e:	f000 fe49 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	f24f 011c 	movw	r1, #61468	; 0xf01c
 80009a8:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x208>)
 80009aa:	f000 fe43 	bl	8001634 <HAL_GPIO_WritePin>
                          |motor1_Pin|motor2_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4842      	ldr	r0, [pc, #264]	; (8000ad0 <MX_GPIO_Init+0x200>)
 80009c6:	f000 fc81 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	483c      	ldr	r0, [pc, #240]	; (8000ad4 <MX_GPIO_Init+0x204>)
 80009e2:	f000 fc73 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x204>)
 8000a02:	f000 fc63 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4830      	ldr	r0, [pc, #192]	; (8000adc <MX_GPIO_Init+0x20c>)
 8000a1c:	f000 fc56 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x210>)
 8000a34:	f000 fc4a 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : buton1_Pin buton2_Pin buton3_Pin buton4_Pin
                           buton5_Pin */
  GPIO_InitStruct.Pin = buton1_Pin|buton2_Pin|buton3_Pin|buton4_Pin
 8000a38:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |buton5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <MX_GPIO_Init+0x200>)
 8000a4e:	f000 fc3d 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a64:	2305      	movs	r3, #5
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0x210>)
 8000a70:	f000 fc2c 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           motor1_Pin motor2_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a74:	f24f 031c 	movw	r3, #61468	; 0xf01c
 8000a78:	61fb      	str	r3, [r7, #28]
                          |motor1_Pin|motor2_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_GPIO_Init+0x208>)
 8000a8e:	f000 fc1d 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_GPIO_Init+0x208>)
 8000aa6:	f000 fc11 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0x200>)
 8000ac0:	f000 fc04 	bl	80012cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fb8a 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 fb96 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_I2S_MspInit+0xf0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d15a      	bne.n	8000cb6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c04:	23c0      	movs	r3, #192	; 0xc0
 8000c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fb9b 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c1c:	f7ff ff62 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c74:	2310      	movs	r3, #16
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c84:	2306      	movs	r3, #6
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_I2S_MspInit+0xf8>)
 8000c90:	f000 fb1c 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca6:	2306      	movs	r3, #6
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <HAL_I2S_MspInit+0xfc>)
 8000cb2:	f000 fb0b 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40003c00 	.word	0x40003c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020800 	.word	0x40020800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_SPI_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d2a:	23e0      	movs	r3, #224	; 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d46:	f000 fac1 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d115      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	201c      	movs	r0, #28
 8000d94:	f000 fa63 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d98:	201c      	movs	r0, #28
 8000d9a:	f000 fa7c 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d11d      	bne.n	8000e0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000e06:	f000 fa61 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8da 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM2_IRQHandler+0x10>)
 8000e76:	f003 fda3 	bl	80049c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000018c 	.word	0x2000018c

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f000 fe57 	bl	8001b3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200005b8 	.word	0x200005b8

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f007 ff90 	bl	8008dec <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20020000 	.word	0x20020000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200001d4 	.word	0x200001d4
 8000f00:	20000a08 	.word	0x20000a08

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f52:	f7ff ffd7 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f007 ff4f 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fab3 	bl	80004c4 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f6c:	08008f20 	.word	0x08008f20
  ldr r2, =_sbss
 8000f70:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f74:	20000a04 	.word	0x20000a04

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fd9e 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f967 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	200001d8 	.word	0x200001d8

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001d8 	.word	0x200001d8

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001668:	b08f      	sub	sp, #60	; 0x3c
 800166a:	af0a      	add	r7, sp, #40	; 0x28
 800166c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e054      	b.n	8001722 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f007 f82c 	bl	80086f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2203      	movs	r2, #3
 800169c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 f858 	bl	800576c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	687e      	ldr	r6, [r7, #4]
 80016c4:	466d      	mov	r5, sp
 80016c6:	f106 0410 	add.w	r4, r6, #16
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016da:	1d33      	adds	r3, r6, #4
 80016dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016de:	6838      	ldr	r0, [r7, #0]
 80016e0:	f003 ffd2 	bl	8005688 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f84f 	bl	800578e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	687e      	ldr	r6, [r7, #4]
 80016f8:	466d      	mov	r5, sp
 80016fa:	f106 0410 	add.w	r4, r6, #16
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800170a:	e885 0003 	stmia.w	r5, {r0, r1}
 800170e:	1d33      	adds	r3, r6, #4
 8001710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001712:	6838      	ldr	r0, [r7, #0]
 8001714:	f004 f9d8 	bl	8005ac8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b089      	sub	sp, #36	; 0x24
 800172e:	af04      	add	r7, sp, #16
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	4608      	mov	r0, r1
 8001734:	4611      	mov	r1, r2
 8001736:	461a      	mov	r2, r3
 8001738:	4603      	mov	r3, r0
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	460b      	mov	r3, r1
 800173e:	70bb      	strb	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_HCD_HC_Init+0x28>
 800174e:	2302      	movs	r3, #2
 8001750:	e076      	b.n	8001840 <HAL_HCD_HC_Init+0x116>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	333d      	adds	r3, #61	; 0x3d
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3338      	adds	r3, #56	; 0x38
 800177a:	787a      	ldrb	r2, [r7, #1]
 800177c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3340      	adds	r3, #64	; 0x40
 800178c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800178e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	3339      	adds	r3, #57	; 0x39
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333f      	adds	r3, #63	; 0x3f
 80017b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	78ba      	ldrb	r2, [r7, #2]
 80017ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017be:	b2d0      	uxtb	r0, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	333a      	adds	r3, #58	; 0x3a
 80017cc:	4602      	mov	r2, r0
 80017ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da09      	bge.n	80017ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	333b      	adds	r3, #59	; 0x3b
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e008      	b.n	80017fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	333b      	adds	r3, #59	; 0x3b
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	333c      	adds	r3, #60	; 0x3c
 800180c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001810:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	787c      	ldrb	r4, [r7, #1]
 8001818:	78ba      	ldrb	r2, [r7, #2]
 800181a:	78f9      	ldrb	r1, [r7, #3]
 800181c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f897 3020 	ldrb.w	r3, [r7, #32]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4623      	mov	r3, r4
 800182e:	f004 fad1 	bl	8005dd4 <USB_HC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}

08001848 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_HCD_HC_Halt+0x1e>
 8001862:	2302      	movs	r3, #2
 8001864:	e00f      	b.n	8001886 <HAL_HCD_HC_Halt+0x3e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fd21 	bl	80062be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	70fb      	strb	r3, [r7, #3]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70bb      	strb	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	333b      	adds	r3, #59	; 0x3b
 80018b8:	78ba      	ldrb	r2, [r7, #2]
 80018ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	333f      	adds	r3, #63	; 0x3f
 80018ca:	787a      	ldrb	r2, [r7, #1]
 80018cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018ce:	7c3b      	ldrb	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d112      	bne.n	80018fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2203      	movs	r2, #3
 80018e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	333d      	adds	r3, #61	; 0x3d
 80018f4:	7f3a      	ldrb	r2, [r7, #28]
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e008      	b.n	800190c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2202      	movs	r2, #2
 800190a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b03      	cmp	r3, #3
 8001910:	f200 80c6 	bhi.w	8001aa0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001a8d 	.word	0x08001a8d
 8001924:	08001991 	.word	0x08001991
 8001928:	08001a0f 	.word	0x08001a0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800192c:	7c3b      	ldrb	r3, [r7, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	f040 80b8 	bne.w	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80b4 	bne.w	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800193c:	8b3b      	ldrh	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3355      	adds	r3, #85	; 0x55
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3355      	adds	r3, #85	; 0x55
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3342      	adds	r3, #66	; 0x42
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800197a:	e093      	b.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e089      	b.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11d      	bne.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3355      	adds	r3, #85	; 0x55
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3342      	adds	r3, #66	; 0x42
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019bc:	e073      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
      break;
 80019d0:	e069      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3354      	adds	r3, #84	; 0x54
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3342      	adds	r3, #66	; 0x42
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e055      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3342      	adds	r3, #66	; 0x42
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e04b      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11d      	bne.n	8001a50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3355      	adds	r3, #85	; 0x55
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3342      	adds	r3, #66	; 0x42
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a3a:	e034      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
      break;
 8001a4e:	e02a      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3354      	adds	r3, #84	; 0x54
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3342      	adds	r3, #66	; 0x42
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
      break;
 8001a76:	e016      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e00c      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3342      	adds	r3, #66	; 0x42
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001aa4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3344      	adds	r3, #68	; 0x44
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	8b3a      	ldrh	r2, [r7, #24]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	202c      	movs	r0, #44	; 0x2c
 8001ac0:	fb00 f303 	mul.w	r3, r0, r3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	334c      	adds	r3, #76	; 0x4c
 8001ac8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3360      	adds	r3, #96	; 0x60
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3350      	adds	r3, #80	; 0x50
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	3339      	adds	r3, #57	; 0x39
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3361      	adds	r3, #97	; 0x61
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	222c      	movs	r2, #44	; 0x2c
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	3338      	adds	r3, #56	; 0x38
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	18d1      	adds	r1, r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f004 fa74 	bl	8006018 <USB_HC_StartXfer>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop

08001b3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 ff75 	bl	8005a42 <USB_GetMode>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	f040 80f6 	bne.w	8001d4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 ff59 	bl	8005a1c <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ec 	beq.w	8001d4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 ff50 	bl	8005a1c <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b86:	d104      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 ff40 	bl	8005a1c <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ba6:	d104      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 ff30 	bl	8005a1c <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bc6:	d104      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 ff20 	bl	8005a1c <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d103      	bne.n	8001bee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 ff12 	bl	8005a1c <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c02:	d11c      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c1e:	2110      	movs	r1, #16
 8001c20:	6938      	ldr	r0, [r7, #16]
 8001c22:	f003 fe01 	bl	8005828 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c26:	6938      	ldr	r0, [r7, #16]
 8001c28:	f003 fe32 	bl	8005890 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 f808 	bl	8005c48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f006 fdd7 	bl	80087ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 feea 	bl	8005a1c <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c52:	d102      	bne.n	8001c5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f001 f89e 	bl	8002d96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fedc 	bl	8005a1c <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d106      	bne.n	8001c7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fda0 	bl	80087b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fecb 	bl	8005a1c <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d101      	bne.n	8001c94 <HAL_HCD_IRQHandler+0x158>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_HCD_IRQHandler+0x15a>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0210 	bic.w	r2, r2, #16
 8001ca8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 ffa1 	bl	8002bf2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0210 	orr.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fea9 	bl	8005a1c <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cd4:	d13a      	bne.n	8001d4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 fade 	bl	800629c <USB_HC_ReadInterrupt>
 8001ce0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e025      	b.n	8001d34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	d106      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8ab 	bl	8001e76 <HCD_HC_IN_IRQHandler>
 8001d20:	e005      	b.n	8001d2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fbf9 	bl	8002520 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3d4      	bcc.n	8001ce8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	e000      	b.n	8001d4c <HAL_HCD_IRQHandler+0x210>
      return;
 8001d4a:	bf00      	nop
    }
  }
}
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_HCD_Start+0x16>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e013      	b.n	8001d90 <HAL_HCD_Start+0x3e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 ffca 	bl	8005d10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fce2 	bl	800574a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_HCD_Stop+0x16>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e00d      	b.n	8001dca <HAL_HCD_Stop+0x32>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fbb8 	bl	8006530 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 ff6c 	bl	8005cbc <USB_ResetPort>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3360      	adds	r3, #96	; 0x60
 8001e08:	781b      	ldrb	r3, [r3, #0]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3350      	adds	r3, #80	; 0x50
 8001e30:	681b      	ldr	r3, [r3, #0]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 ffb0 	bl	8005db0 <USB_GetCurrentFrame>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 ff8b 	bl	8005d82 <USB_GetHostSpeed>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d11a      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3361      	adds	r3, #97	; 0x61
 8001ec6:	2206      	movs	r2, #6
 8001ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f9f2 	bl	80062be <USB_HC_Halt>
 8001eda:	e0af      	b.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef2:	d11b      	bne.n	8001f2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3361      	adds	r3, #97	; 0x61
 8001f16:	2207      	movs	r2, #7
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f004 f9ca 	bl	80062be <USB_HC_Halt>
 8001f2a:	e087      	b.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2320      	movs	r3, #32
 8001f52:	6093      	str	r3, [r2, #8]
 8001f54:	e072      	b.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d11a      	bne.n	8001fa2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3361      	adds	r3, #97	; 0x61
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f98f 	bl	80062be <USB_HC_Halt>
 8001fa0:	e04c      	b.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb8:	d11b      	bne.n	8001ff2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3361      	adds	r3, #97	; 0x61
 8001fdc:	2208      	movs	r2, #8
 8001fde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 f967 	bl	80062be <USB_HC_Halt>
 8001ff0:	e024      	b.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d119      	bne.n	800203c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	461a      	mov	r2, r3
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3361      	adds	r3, #97	; 0x61
 8002028:	2206      	movs	r2, #6
 800202a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f941 	bl	80062be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002052:	d112      	bne.n	800207a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f92d 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002076:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002078:	e24e      	b.n	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 80df 	bne.w	8002250 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3348      	adds	r3, #72	; 0x48
 80020a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0159      	lsls	r1, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	202c      	movs	r0, #44	; 0x2c
 80020c4:	fb00 f303 	mul.w	r3, r0, r3
 80020c8:	440b      	add	r3, r1
 80020ca:	3350      	adds	r3, #80	; 0x50
 80020cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	; 0x61
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	335c      	adds	r3, #92	; 0x5c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	333f      	adds	r3, #63	; 0x3f
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	333f      	adds	r3, #63	; 0x3f
 8002126:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002128:	2b02      	cmp	r3, #2
 800212a:	d111      	bne.n	8002150 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f8c1 	bl	80062be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2310      	movs	r3, #16
 800214c:	6093      	str	r3, [r2, #8]
 800214e:	e03a      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	333f      	adds	r3, #63	; 0x3f
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d009      	beq.n	8002178 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	333f      	adds	r3, #63	; 0x3f
 8002172:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002174:	2b01      	cmp	r3, #1
 8002176:	d126      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	0151      	lsls	r1, r2, #5
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	440a      	add	r2, r1
 800218e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002196:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	b2d9      	uxtb	r1, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	202c      	movs	r0, #44	; 0x2c
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f006 fb21 	bl	8008808 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d12b      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3348      	adds	r3, #72	; 0x48
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	202c      	movs	r0, #44	; 0x2c
 80021e4:	fb00 f202 	mul.w	r2, r0, r2
 80021e8:	440a      	add	r2, r1
 80021ea:	3240      	adds	r2, #64	; 0x40
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 818e 	beq.w	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3354      	adds	r3, #84	; 0x54
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f083 0301 	eor.w	r3, r3, #1
 8002210:	b2d8      	uxtb	r0, r3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3354      	adds	r3, #84	; 0x54
 8002220:	4602      	mov	r2, r0
 8002222:	701a      	strb	r2, [r3, #0]
}
 8002224:	e178      	b.n	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3354      	adds	r3, #84	; 0x54
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3354      	adds	r3, #84	; 0x54
 800224a:	4602      	mov	r2, r0
 800224c:	701a      	strb	r2, [r3, #0]
}
 800224e:	e163      	b.n	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 80f6 	bne.w	8002454 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3361      	adds	r3, #97	; 0x61
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d109      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3360      	adds	r3, #96	; 0x60
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e0c9      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d109      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3360      	adds	r3, #96	; 0x60
 80022b2:	2205      	movs	r2, #5
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e0b5      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3361      	adds	r3, #97	; 0x61
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d009      	beq.n	80022e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3361      	adds	r3, #97	; 0x61
 80022da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d150      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	335c      	adds	r3, #92	; 0x5c
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	202c      	movs	r0, #44	; 0x2c
 80022f8:	fb00 f303 	mul.w	r3, r0, r3
 80022fc:	440b      	add	r3, r1
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	335c      	adds	r3, #92	; 0x5c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d912      	bls.n	800233c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	335c      	adds	r3, #92	; 0x5c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3360      	adds	r3, #96	; 0x60
 8002336:	2204      	movs	r2, #4
 8002338:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800233a:	e073      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3360      	adds	r3, #96	; 0x60
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002364:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800236c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002380:	e050      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3361      	adds	r3, #97	; 0x61
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d122      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e023      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3361      	adds	r3, #97	; 0x61
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b07      	cmp	r3, #7
 80023ee:	d119      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	335c      	adds	r3, #92	; 0x5c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	440b      	add	r3, r1
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3360      	adds	r3, #96	; 0x60
 8002420:	2204      	movs	r2, #4
 8002422:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2302      	movs	r3, #2
 8002434:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	b2d9      	uxtb	r1, r3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	202c      	movs	r0, #44	; 0x2c
 8002440:	fb00 f303 	mul.w	r3, r0, r3
 8002444:	4413      	add	r3, r2
 8002446:	3360      	adds	r3, #96	; 0x60
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f006 f9db 	bl	8008808 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002452:	e061      	b.n	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b10      	cmp	r3, #16
 8002468:	d156      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	333f      	adds	r3, #63	; 0x3f
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d111      	bne.n	80024a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	335c      	adds	r3, #92	; 0x5c
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff0f 	bl	80062be <USB_HC_Halt>
 80024a0:	e031      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	333f      	adds	r3, #63	; 0x3f
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	333f      	adds	r3, #63	; 0x3f
 80024c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11d      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	335c      	adds	r3, #92	; 0x5c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d110      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	2203      	movs	r2, #3
 80024f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fedc 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2310      	movs	r3, #16
 8002516:	6093      	str	r3, [r2, #8]
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11a      	bne.n	8002586 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	461a      	mov	r2, r3
 800255e:	2304      	movs	r3, #4
 8002560:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3361      	adds	r3, #97	; 0x61
 8002570:	2206      	movs	r2, #6
 8002572:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe9d 	bl	80062be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002584:	e331      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d12e      	bne.n	80025fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2320      	movs	r3, #32
 80025ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	333d      	adds	r3, #61	; 0x3d
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	f040 8313 	bne.w	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	333d      	adds	r3, #61	; 0x3d
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3360      	adds	r3, #96	; 0x60
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fe63 	bl	80062be <USB_HC_Halt>
}
 80025f8:	e2f7      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d112      	bne.n	8002638 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fe44 	bl	80062be <USB_HC_Halt>
}
 8002636:	e2d8      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d140      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	335c      	adds	r3, #92	; 0x5c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d111      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333d      	adds	r3, #61	; 0x3d
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2301      	movs	r3, #1
 80026aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fdf8 	bl	80062be <USB_HC_Halt>
}
 80026ce:	e28c      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d12c      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3361      	adds	r3, #97	; 0x61
 80026f4:	2204      	movs	r2, #4
 80026f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	333d      	adds	r3, #61	; 0x3d
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	335c      	adds	r3, #92	; 0x5c
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fdc9 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	6093      	str	r3, [r2, #8]
}
 800273e:	e254      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11a      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	2308      	movs	r3, #8
 8002766:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	2205      	movs	r2, #5
 8002778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fd9a 	bl	80062be <USB_HC_Halt>
}
 800278a:	e22e      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d140      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3361      	adds	r3, #97	; 0x61
 80027c2:	2203      	movs	r2, #3
 80027c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	333d      	adds	r3, #61	; 0x3d
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d112      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	333c      	adds	r3, #60	; 0x3c
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	333d      	adds	r3, #61	; 0x3d
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fd57 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2310      	movs	r3, #16
 8002820:	6093      	str	r3, [r2, #8]
}
 8002822:	e1e2      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d164      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d111      	bne.n	8002866 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3361      	adds	r3, #97	; 0x61
 8002850:	2206      	movs	r2, #6
 8002852:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fd2d 	bl	80062be <USB_HC_Halt>
 8002864:	e044      	b.n	80028f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	202c      	movs	r0, #44	; 0x2c
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	440b      	add	r3, r1
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d920      	bls.n	80028de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	335c      	adds	r3, #92	; 0x5c
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3360      	adds	r3, #96	; 0x60
 80028bc:	2204      	movs	r2, #4
 80028be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	b2d9      	uxtb	r1, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	202c      	movs	r0, #44	; 0x2c
 80028ca:	fb00 f303 	mul.w	r3, r0, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f005 ff96 	bl	8008808 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028dc:	e008      	b.n	80028f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3360      	adds	r3, #96	; 0x60
 80028ec:	2202      	movs	r2, #2
 80028ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	461a      	mov	r2, r3
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	6093      	str	r3, [r2, #8]
}
 8002902:	e172      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d11b      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	2208      	movs	r2, #8
 800292c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fcc0 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002950:	6093      	str	r3, [r2, #8]
}
 8002952:	e14a      	b.n	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	f040 813f 	bne.w	8002bea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d17d      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	333f      	adds	r3, #63	; 0x3f
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d00a      	beq.n	80029bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	333f      	adds	r3, #63	; 0x3f
 80029b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	f040 8100 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d113      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3355      	adds	r3, #85	; 0x55
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2d8      	uxtb	r0, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3355      	adds	r3, #85	; 0x55
 80029e8:	4602      	mov	r2, r0
 80029ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 80e3 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	334c      	adds	r3, #76	; 0x4c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80d8 	beq.w	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	334c      	adds	r3, #76	; 0x4c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	202c      	movs	r0, #44	; 0x2c
 8002a22:	fb00 f202 	mul.w	r2, r0, r2
 8002a26:	440a      	add	r2, r1
 8002a28:	3240      	adds	r2, #64	; 0x40
 8002a2a:	8812      	ldrh	r2, [r2, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	202c      	movs	r0, #44	; 0x2c
 8002a36:	fb00 f202 	mul.w	r2, r0, r2
 8002a3a:	440a      	add	r2, r1
 8002a3c:	3240      	adds	r2, #64	; 0x40
 8002a3e:	8812      	ldrh	r2, [r2, #0]
 8002a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80b5 	beq.w	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3355      	adds	r3, #85	; 0x55
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2d8      	uxtb	r0, r3
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3355      	adds	r3, #85	; 0x55
 8002a76:	4602      	mov	r2, r0
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e09f      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	; 0x61
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d109      	bne.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3360      	adds	r3, #96	; 0x60
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e08b      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d109      	bne.n	8002acc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e077      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d109      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	2205      	movs	r2, #5
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e063      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	; 0x61
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d009      	beq.n	8002b1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d14f      	bne.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	335c      	adds	r3, #92	; 0x5c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	440b      	add	r3, r1
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d912      	bls.n	8002b78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	2204      	movs	r2, #4
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e021      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2302      	movs	r3, #2
 8002bcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	b2d9      	uxtb	r1, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	202c      	movs	r0, #44	; 0x2c
 8002bd8:	fb00 f303 	mul.w	r3, r0, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f005 fe0f 	bl	8008808 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bea:	bf00      	nop
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b08a      	sub	sp, #40	; 0x28
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	0c5b      	lsrs	r3, r3, #17
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d004      	beq.n	8002c38 <HCD_RXQLVL_IRQHandler+0x46>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	f000 80a9 	beq.w	8002d88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c36:	e0aa      	b.n	8002d8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a6 	beq.w	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3344      	adds	r3, #68	; 0x44
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 809b 	beq.w	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3350      	adds	r3, #80	; 0x50
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	441a      	add	r2, r3
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	202c      	movs	r0, #44	; 0x2c
 8002c70:	fb00 f303 	mul.w	r3, r0, r3
 8002c74:	440b      	add	r3, r1
 8002c76:	334c      	adds	r3, #76	; 0x4c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d87a      	bhi.n	8002d74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	b292      	uxth	r2, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f002 fe68 	bl	800596c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3344      	adds	r3, #68	; 0x44
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	441a      	add	r2, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	; 0x44
 8002cbe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3350      	adds	r3, #80	; 0x50
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	202c      	movs	r0, #44	; 0x2c
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3350      	adds	r3, #80	; 0x50
 8002ce2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	0cdb      	lsrs	r3, r3, #19
 8002cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3340      	adds	r3, #64	; 0x40
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d13c      	bne.n	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d039      	beq.n	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3354      	adds	r3, #84	; 0x54
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f083 0301 	eor.w	r3, r3, #1
 8002d5e:	b2d8      	uxtb	r0, r3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3354      	adds	r3, #84	; 0x54
 8002d6e:	4602      	mov	r2, r0
 8002d70:	701a      	strb	r2, [r3, #0]
      break;
 8002d72:	e00b      	b.n	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2204      	movs	r2, #4
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e001      	b.n	8002d8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d8c:	bf00      	nop
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dc2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d10b      	bne.n	8002de6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d102      	bne.n	8002dde <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f005 fcf9 	bl	80087d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d132      	bne.n	8002e56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d126      	bne.n	8002e50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d113      	bne.n	8002e32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e14:	d106      	bne.n	8002e24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 ff13 	bl	8005c48 <USB_InitFSLSPClkSel>
 8002e22:	e011      	b.n	8002e48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 ff0c 	bl	8005c48 <USB_InitFSLSPClkSel>
 8002e30:	e00a      	b.n	8002e48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d106      	bne.n	8002e48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e40:	461a      	mov	r2, r3
 8002e42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f005 fceb 	bl	8008824 <HAL_HCD_PortEnabled_Callback>
 8002e4e:	e002      	b.n	8002e56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f005 fcf5 	bl	8008840 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d103      	bne.n	8002e68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e12b      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fe4c 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f001 fa20 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a81      	ldr	r2, [pc, #516]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d807      	bhi.n	8002f00 <HAL_I2C_Init+0x84>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a80      	ldr	r2, [pc, #512]	; (80030f4 <HAL_I2C_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e006      	b.n	8002f0e <HAL_I2C_Init+0x92>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a7d      	ldr	r2, [pc, #500]	; (80030f8 <HAL_I2C_Init+0x27c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e7      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a78      	ldr	r2, [pc, #480]	; (80030fc <HAL_I2C_Init+0x280>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d802      	bhi.n	8002f50 <HAL_I2C_Init+0xd4>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	e009      	b.n	8002f64 <HAL_I2C_Init+0xe8>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a69      	ldr	r2, [pc, #420]	; (8003100 <HAL_I2C_Init+0x284>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	3301      	adds	r3, #1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	495c      	ldr	r1, [pc, #368]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d819      	bhi.n	8002fb8 <HAL_I2C_Init+0x13c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e59      	subs	r1, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f98:	400b      	ands	r3, r1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_I2C_Init+0x138>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e59      	subs	r1, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	e051      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e04f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <HAL_I2C_Init+0x168>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e012      	b.n	800300a <HAL_I2C_Init+0x18e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x196>
 800300e:	2301      	movs	r3, #1
 8003010:	e022      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <HAL_I2C_Init+0x1bc>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e58      	subs	r0, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	440b      	add	r3, r1
 8003028:	fbb0 f3f3 	udiv	r3, r0, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003036:	e00f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6911      	ldr	r1, [r2, #16]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68d2      	ldr	r2, [r2, #12]
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	000186a0 	.word	0x000186a0
 80030f4:	001e847f 	.word	0x001e847f
 80030f8:	003d08ff 	.word	0x003d08ff
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	10624dd3 	.word	0x10624dd3

08003104 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e128      	b.n	8003368 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a90      	ldr	r2, [pc, #576]	; (8003370 <HAL_I2S_Init+0x26c>)
 800312e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fd4d 	bl	8000bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d060      	beq.n	8003224 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800316a:	2310      	movs	r3, #16
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e001      	b.n	8003174 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b20      	cmp	r3, #32
 800317a:	d802      	bhi.n	8003182 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003182:	2001      	movs	r0, #1
 8003184:	f001 f9c4 	bl	8004510 <HAL_RCCEx_GetPeriphCLKFreq>
 8003188:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d125      	bne.n	80031e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	3305      	adds	r3, #5
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e01f      	b.n	80031fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	461a      	mov	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	3305      	adds	r3, #5
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e00e      	b.n	80031fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	3305      	adds	r3, #5
 80031fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4a5c      	ldr	r2, [pc, #368]	; (8003374 <HAL_I2S_Init+0x270>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e003      	b.n	800322c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003224:	2302      	movs	r3, #2
 8003226:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d902      	bls.n	8003238 <HAL_I2S_Init+0x134>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2bff      	cmp	r3, #255	; 0xff
 8003236:	d907      	bls.n	8003248 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f043 0210 	orr.w	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e08f      	b.n	8003368 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	ea42 0103 	orr.w	r1, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	430a      	orrs	r2, r1
 800325a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6851      	ldr	r1, [r2, #4]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	4311      	orrs	r1, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68d2      	ldr	r2, [r2, #12]
 8003278:	4311      	orrs	r1, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6992      	ldr	r2, [r2, #24]
 800327e:	430a      	orrs	r2, r1
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d161      	bne.n	8003358 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a38      	ldr	r2, [pc, #224]	; (8003378 <HAL_I2S_Init+0x274>)
 8003298:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <HAL_I2S_Init+0x278>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_I2S_Init+0x1a4>
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_I2S_Init+0x27c>)
 80032a6:	e001      	b.n	80032ac <HAL_I2S_Init+0x1a8>
 80032a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4932      	ldr	r1, [pc, #200]	; (800337c <HAL_I2S_Init+0x278>)
 80032b4:	428a      	cmp	r2, r1
 80032b6:	d101      	bne.n	80032bc <HAL_I2S_Init+0x1b8>
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <HAL_I2S_Init+0x27c>)
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x1bc>
 80032bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	; (800337c <HAL_I2S_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_I2S_Init+0x1d4>
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_I2S_Init+0x27c>)
 80032d6:	e001      	b.n	80032dc <HAL_I2S_Init+0x1d8>
 80032d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032dc:	2202      	movs	r2, #2
 80032de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_I2S_Init+0x278>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_I2S_Init+0x1ea>
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_I2S_Init+0x27c>)
 80032ec:	e001      	b.n	80032f2 <HAL_I2S_Init+0x1ee>
 80032ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fe:	d003      	beq.n	8003308 <HAL_I2S_Init+0x204>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e001      	b.n	8003314 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800331e:	4313      	orrs	r3, r2
 8003320:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003328:	4313      	orrs	r3, r2
 800332a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003332:	4313      	orrs	r3, r2
 8003334:	b29a      	uxth	r2, r3
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	4313      	orrs	r3, r2
 800333a:	b29b      	uxth	r3, r3
 800333c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003340:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_I2S_Init+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_I2S_Init+0x24c>
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_I2S_Init+0x27c>)
 800334e:	e001      	b.n	8003354 <HAL_I2S_Init+0x250>
 8003350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003354:	897a      	ldrh	r2, [r7, #10]
 8003356:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800347b 	.word	0x0800347b
 8003374:	cccccccd 	.word	0xcccccccd
 8003378:	08003591 	.word	0x08003591
 800337c:	40003800 	.word	0x40003800
 8003380:	40003400 	.word	0x40003400

08003384 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c9a      	adds	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003404:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffb8 	bl	8003384 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003462:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff93 	bl	8003398 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b04      	cmp	r3, #4
 8003494:	d13a      	bne.n	800350c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d109      	bne.n	80034b4 <I2S_IRQHandler+0x3a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d102      	bne.n	80034b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffb4 	bl	800341c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d126      	bne.n	800350c <I2S_IRQHandler+0x92>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d11f      	bne.n	800350c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f043 0202 	orr.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ff50 	bl	80033ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d136      	bne.n	8003586 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d109      	bne.n	8003536 <I2S_IRQHandler+0xbc>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d102      	bne.n	8003536 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ff45 	bl	80033c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d122      	bne.n	8003586 <I2S_IRQHandler+0x10c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d11b      	bne.n	8003586 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800355c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff13 	bl	80033ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a92      	ldr	r2, [pc, #584]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035aa:	4b92      	ldr	r3, [pc, #584]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ac:	e001      	b.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a8b      	ldr	r2, [pc, #556]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035c8:	4b8a      	ldr	r3, [pc, #552]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ca:	e001      	b.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d004      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 8099 	bne.w	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f925 	bl	800384c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9c8 	bl	80039ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d13a      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d035      	beq.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800363a:	4b6e      	ldr	r3, [pc, #440]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800363c:	e001      	b.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800363e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4969      	ldr	r1, [pc, #420]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364a:	428b      	cmp	r3, r1
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800364e:	4b69      	ldr	r3, [pc, #420]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800366a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fe88 	bl	80033ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	f040 80c3 	bne.w	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80bd 	beq.w	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a49      	ldr	r2, [pc, #292]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d0:	e001      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4944      	ldr	r1, [pc, #272]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036de:	428b      	cmp	r3, r1
 80036e0:	d101      	bne.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e4:	e001      	b.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fe4a 	bl	80033ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003718:	e089      	b.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d107      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8be 	bl	80038b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8fd 	bl	8003948 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d12f      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02a      	beq.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003770:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800377e:	e001      	b.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4919      	ldr	r1, [pc, #100]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d101      	bne.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003792:	e001      	b.n	8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fdfa 	bl	80033ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d136      	bne.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d031      	beq.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d8:	e001      	b.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4902      	ldr	r1, [pc, #8]	; (80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037e6:	428b      	cmp	r3, r1
 80037e8:	d106      	bne.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037ea:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ec:	e006      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037ee:	bf00      	nop
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400
 80037f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003800:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003810:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0204 	orr.w	r2, r3, #4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fdc0 	bl	80033ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382c:	e000      	b.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800382e:	bf00      	nop
}
 8003830:	bf00      	nop
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	1c99      	adds	r1, r3, #2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6251      	str	r1, [r2, #36]	; 0x24
 800385e:	881a      	ldrh	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d113      	bne.n	80038a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800388c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ffc9 	bl	8003838 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	1c99      	adds	r1, r3, #2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6251      	str	r1, [r2, #36]	; 0x24
 80038c2:	8819      	ldrh	r1, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <I2SEx_TxISR_I2SExt+0x90>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <I2SEx_TxISR_I2SExt+0x22>
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <I2SEx_TxISR_I2SExt+0x94>)
 80038d0:	e001      	b.n	80038d6 <I2SEx_TxISR_I2SExt+0x26>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	460a      	mov	r2, r1
 80038d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d121      	bne.n	8003936 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <I2SEx_TxISR_I2SExt+0x90>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <I2SEx_TxISR_I2SExt+0x50>
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <I2SEx_TxISR_I2SExt+0x94>)
 80038fe:	e001      	b.n	8003904 <I2SEx_TxISR_I2SExt+0x54>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <I2SEx_TxISR_I2SExt+0x90>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d101      	bne.n	8003914 <I2SEx_TxISR_I2SExt+0x64>
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <I2SEx_TxISR_I2SExt+0x94>)
 8003912:	e001      	b.n	8003918 <I2SEx_TxISR_I2SExt+0x68>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff81 	bl	8003838 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40003800 	.word	0x40003800
 8003944:	40003400 	.word	0x40003400

08003948 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68d8      	ldr	r0, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	1c99      	adds	r1, r3, #2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003960:	b282      	uxth	r2, r0
 8003962:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d113      	bne.n	80039a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800398a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff4a 	bl	8003838 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <I2SEx_RxISR_I2SExt+0x90>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <I2SEx_RxISR_I2SExt+0x16>
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <I2SEx_RxISR_I2SExt+0x94>)
 80039c0:	e001      	b.n	80039c6 <I2SEx_RxISR_I2SExt+0x1a>
 80039c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c6:	68d8      	ldr	r0, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	1c99      	adds	r1, r3, #2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039d2:	b282      	uxth	r2, r0
 80039d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d121      	bne.n	8003a32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <I2SEx_RxISR_I2SExt+0x90>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <I2SEx_RxISR_I2SExt+0x50>
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <I2SEx_RxISR_I2SExt+0x94>)
 80039fa:	e001      	b.n	8003a00 <I2SEx_RxISR_I2SExt+0x54>
 80039fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <I2SEx_RxISR_I2SExt+0x90>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d101      	bne.n	8003a10 <I2SEx_RxISR_I2SExt+0x64>
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <I2SEx_RxISR_I2SExt+0x94>)
 8003a0e:	e001      	b.n	8003a14 <I2SEx_RxISR_I2SExt+0x68>
 8003a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff03 	bl	8003838 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40003800 	.word	0x40003800
 8003a40:	40003400 	.word	0x40003400

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e267      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b82      	ldr	r3, [pc, #520]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e242      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6f      	ldr	r2, [pc, #444]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd faa4 	bl	8001048 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd faa0 	bl	8001048 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e207      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd fa90 	bl	8001048 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fa8c 	bl	8001048 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1f3      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1c7      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fa45 	bl	8001048 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fa41 	bl	8001048 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1a8      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4925      	ldr	r1, [pc, #148]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fa24 	bl	8001048 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd fa20 	bl	8001048 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e187      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fa04 	bl	8001048 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd fa00 	bl	8001048 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e167      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e01b      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd f9ed 	bl	8001048 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fd f9e9 	bl	8001048 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e150      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	42470000 	.word	0x42470000
 8003c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8097 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b7a      	ldr	r3, [pc, #488]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b77      	ldr	r3, [pc, #476]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b74      	ldr	r3, [pc, #464]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a73      	ldr	r2, [pc, #460]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd f9a9 	bl	8001048 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd f9a5 	bl	8001048 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e10c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2ea>
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x30c>
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a5e      	ldr	r2, [pc, #376]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5b      	ldr	r2, [pc, #364]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d50:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a57      	ldr	r2, [pc, #348]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd f96a 	bl	8001048 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd f966 	bl	8001048 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0cb      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	4b49      	ldr	r3, [pc, #292]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ee      	beq.n	8003d78 <HAL_RCC_OscConfig+0x334>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fd f954 	bl	8001048 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fd f950 	bl	8001048 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0b5      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ee      	bne.n	8003da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a1 	beq.w	8003f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d05c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d141      	bne.n	8003e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd f924 	bl	8001048 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd f920 	bl	8001048 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e087      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	491b      	ldr	r1, [pc, #108]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd f8f9 	bl	8001048 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd f8f5 	bl	8001048 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e05c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x416>
 8003e78:	e054      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd f8e2 	bl	8001048 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd f8de 	bl	8001048 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e045      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x444>
 8003ea6:	e03d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e038      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x4ec>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d028      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d121      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11a      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cc      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b68      	ldr	r3, [pc, #416]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d90c      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b8      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f88:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	494d      	ldr	r1, [pc, #308]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d119      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e067      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4934      	ldr	r1, [pc, #208]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd f810 	bl	8001048 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd f80c 	bl	8001048 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d20c      	bcs.n	800407c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e032      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4916      	ldr	r1, [pc, #88]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490e      	ldr	r1, [pc, #56]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ba:	f000 f821 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490a      	ldr	r1, [pc, #40]	; (80040f4 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc ff70 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08008ef8 	.word	0x08008ef8
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000004 	.word	0x20000004

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b094      	sub	sp, #80	; 0x50
 8004106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	647b      	str	r3, [r7, #68]	; 0x44
 800410c:	2300      	movs	r3, #0
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004110:	2300      	movs	r3, #0
 8004112:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004118:	4b79      	ldr	r3, [pc, #484]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d00d      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x40>
 8004124:	2b08      	cmp	r3, #8
 8004126:	f200 80e1 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x34>
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x3a>
 8004132:	e0db      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b73      	ldr	r3, [pc, #460]	; (8004304 <HAL_RCC_GetSysClockFreq+0x204>)
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004138:	e0db      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413a:	4b73      	ldr	r3, [pc, #460]	; (8004308 <HAL_RCC_GetSysClockFreq+0x208>)
 800413c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800413e:	e0d8      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414a:	4b6d      	ldr	r3, [pc, #436]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	2200      	movs	r2, #0
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
 800416a:	2300      	movs	r3, #0
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
 800416e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004184:	0150      	lsls	r0, r2, #5
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4621      	mov	r1, r4
 800418c:	1a51      	subs	r1, r2, r1
 800418e:	6139      	str	r1, [r7, #16]
 8004190:	4629      	mov	r1, r5
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a4:	4659      	mov	r1, fp
 80041a6:	018b      	lsls	r3, r1, #6
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ae:	4651      	mov	r1, sl
 80041b0:	018a      	lsls	r2, r1, #6
 80041b2:	4651      	mov	r1, sl
 80041b4:	ebb2 0801 	subs.w	r8, r2, r1
 80041b8:	4659      	mov	r1, fp
 80041ba:	eb63 0901 	sbc.w	r9, r3, r1
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d2:	4690      	mov	r8, r2
 80041d4:	4699      	mov	r9, r3
 80041d6:	4623      	mov	r3, r4
 80041d8:	eb18 0303 	adds.w	r3, r8, r3
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	462b      	mov	r3, r5
 80041e0:	eb49 0303 	adc.w	r3, r9, r3
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041f2:	4629      	mov	r1, r5
 80041f4:	024b      	lsls	r3, r1, #9
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041fc:	4621      	mov	r1, r4
 80041fe:	024a      	lsls	r2, r1, #9
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	2200      	movs	r2, #0
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004210:	f7fb ffda 	bl	80001c8 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800421c:	e058      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421e:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	2200      	movs	r2, #0
 8004226:	4618      	mov	r0, r3
 8004228:	4611      	mov	r1, r2
 800422a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0159      	lsls	r1, r3, #5
 8004246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424a:	0150      	lsls	r0, r2, #5
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4641      	mov	r1, r8
 8004252:	ebb2 0a01 	subs.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb63 0b01 	sbc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800426c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004270:	ebb2 040a 	subs.w	r4, r2, sl
 8004274:	eb63 050b 	sbc.w	r5, r3, fp
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4643      	mov	r3, r8
 800428e:	18e3      	adds	r3, r4, r3
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	464b      	mov	r3, r9
 8004294:	eb45 0303 	adc.w	r3, r5, r3
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	61fa      	str	r2, [r7, #28]
 80042c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c4:	f7fb ff80 	bl	80001c8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3750      	adds	r7, #80	; 0x50
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	08008f08 	.word	0x08008f08

0800434c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004370:	2b00      	cmp	r3, #0
 8004372:	d035      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004374:	4b62      	ldr	r3, [pc, #392]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800437a:	f7fc fe65 	bl	8001048 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004382:	f7fc fe61 	bl	8001048 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0b0      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004394:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	019a      	lsls	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	071b      	lsls	r3, r3, #28
 80043ac:	4955      	ldr	r1, [pc, #340]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b4:	4b52      	ldr	r3, [pc, #328]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ba:	f7fc fe45 	bl	8001048 <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c2:	f7fc fe41 	bl	8001048 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e090      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8083 	beq.w	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3e      	ldr	r2, [pc, #248]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004416:	f7fc fe17 	bl	8001048 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fc fe13 	bl	8001048 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e062      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004430:	4b35      	ldr	r3, [pc, #212]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d028      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004464:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800446a:	4b28      	ldr	r3, [pc, #160]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004470:	4a24      	ldr	r2, [pc, #144]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d114      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004482:	f7fc fde1 	bl	8001048 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fc fddd 	bl	8001048 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e02a      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	4b18      	ldr	r3, [pc, #96]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ee      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b8:	d10d      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	490d      	ldr	r1, [pc, #52]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]
 80044d4:	e005      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ee:	4905      	ldr	r1, [pc, #20]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	42470068 	.word	0x42470068
 8004504:	40023800 	.word	0x40023800
 8004508:	40007000 	.word	0x40007000
 800450c:	42470e40 	.word	0x42470e40

08004510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d13e      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d12f      	bne.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004544:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004546:	617b      	str	r3, [r7, #20]
          break;
 8004548:	e02f      	b.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d108      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e007      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800457c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	0f1b      	lsrs	r3, r3, #28
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
          break;
 80045a2:	e002      	b.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
          break;
 80045a8:	bf00      	nop
        }
      }
      break;
 80045aa:	bf00      	nop
    }
  }
  return frequency;
 80045ac:	697b      	ldr	r3, [r7, #20]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
 80045c0:	00bb8000 	.word	0x00bb8000
 80045c4:	007a1200 	.word	0x007a1200
 80045c8:	00f42400 	.word	0x00f42400

080045cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07b      	b.n	80046d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ee:	d009      	beq.n	8004604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
 80045f6:	e005      	b.n	8004604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fb56 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	ea42 0103 	orr.w	r1, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	f003 0104 	and.w	r1, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0210 	and.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e041      	b.n	8004774 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fc fb2b 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 fc13 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f839 	bl	800481a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fbc4 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x24>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e022      	b.n	800489a <HAL_TIM_PWM_Start+0x6a>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d109      	bne.n	800486e <HAL_TIM_PWM_Start+0x3e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e015      	b.n	800489a <HAL_TIM_PWM_Start+0x6a>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x58>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e008      	b.n	800489a <HAL_TIM_PWM_Start+0x6a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07c      	b.n	800499c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start+0x82>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b0:	e013      	b.n	80048da <HAL_TIM_PWM_Start+0xaa>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x92>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	e00b      	b.n	80048da <HAL_TIM_PWM_Start+0xaa>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Start+0xa2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d0:	e003      	b.n	80048da <HAL_TIM_PWM_Start+0xaa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fe1a 	bl	800551c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_TIM_PWM_Start+0x174>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_PWM_Start+0xcc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <HAL_TIM_PWM_Start+0x178>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_PWM_Start+0xd0>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_TIM_PWM_Start+0xd2>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_TIM_PWM_Start+0x174>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d01d      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_TIM_PWM_Start+0x17c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_TIM_PWM_Start+0x180>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIM_PWM_Start+0x184>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <HAL_TIM_PWM_Start+0x178>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_TIM_PWM_Start+0x188>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_TIM_PWM_Start+0x18c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d111      	bne.n	800498a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b06      	cmp	r3, #6
 8004976:	d010      	beq.n	800499a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	e007      	b.n	800499a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40001800 	.word	0x40001800

080049c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0202 	mvn.w	r2, #2
 80049ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa81 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa73 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa84 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0204 	mvn.w	r2, #4
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa57 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa49 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fa5a 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d122      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0208 	mvn.w	r2, #8
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa2d 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa1f 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa30 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0210 	mvn.w	r2, #16
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2208      	movs	r2, #8
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa03 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9f5 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa06 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10e      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0201 	mvn.w	r2, #1
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9cf 	bl	8004ee2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fd82 	bl	8005674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d10e      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d107      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9cb 	bl	8004f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0220 	mvn.w	r2, #32
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fd4c 	bl	8005660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0ae      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	f200 809f 	bhi.w	8004d3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c39 	.word	0x08004c39
 8004c08:	08004d3d 	.word	0x08004d3d
 8004c0c:	08004d3d 	.word	0x08004d3d
 8004c10:	08004d3d 	.word	0x08004d3d
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004d3d 	.word	0x08004d3d
 8004c1c:	08004d3d 	.word	0x08004d3d
 8004c20:	08004d3d 	.word	0x08004d3d
 8004c24:	08004cbb 	.word	0x08004cbb
 8004c28:	08004d3d 	.word	0x08004d3d
 8004c2c:	08004d3d 	.word	0x08004d3d
 8004c30:	08004d3d 	.word	0x08004d3d
 8004c34:	08004cfb 	.word	0x08004cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa22 	bl	8005088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
      break;
 8004c76:	e064      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fa72 	bl	8005168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
      break;
 8004cb8:	e043      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fac7 	bl	8005254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	61da      	str	r2, [r3, #28]
      break;
 8004cf8:	e023      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb1b 	bl	800533c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	021a      	lsls	r2, r3, #8
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
      break;
 8004d3a:	e002      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_ConfigClockSource+0x1c>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0b4      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x186>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da8:	d03e      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0xd4>
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dae:	f200 8087 	bhi.w	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	f000 8086 	beq.w	8004ec6 <HAL_TIM_ConfigClockSource+0x172>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	d87f      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d01a      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xa6>
 8004dc4:	2b70      	cmp	r3, #112	; 0x70
 8004dc6:	d87b      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d050      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x11a>
 8004dcc:	2b60      	cmp	r3, #96	; 0x60
 8004dce:	d877      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d03c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xfa>
 8004dd4:	2b50      	cmp	r3, #80	; 0x50
 8004dd6:	d873      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d058      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x13a>
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d86f      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	d064      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b30      	cmp	r3, #48	; 0x30
 8004de6:	d86b      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d060      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d867      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d05c      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d05a      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	e062      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6899      	ldr	r1, [r3, #8]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f000 fb67 	bl	80054dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	609a      	str	r2, [r3, #8]
      break;
 8004e26:	e04f      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6899      	ldr	r1, [r3, #8]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f000 fb50 	bl	80054dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e4a:	609a      	str	r2, [r3, #8]
      break;
 8004e4c:	e03c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fac4 	bl	80053e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2150      	movs	r1, #80	; 0x50
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb1d 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e02c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 fae3 	bl	8005446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2160      	movs	r1, #96	; 0x60
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb0d 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e01c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 faa4 	bl	80053e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2140      	movs	r1, #64	; 0x40
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fafd 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f000 faf4 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a40      	ldr	r2, [pc, #256]	; (800505c <TIM_Base_SetConfig+0x114>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d00f      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3d      	ldr	r2, [pc, #244]	; (8005060 <TIM_Base_SetConfig+0x118>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3c      	ldr	r2, [pc, #240]	; (8005064 <TIM_Base_SetConfig+0x11c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <TIM_Base_SetConfig+0x120>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	; (800506c <TIM_Base_SetConfig+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2f      	ldr	r2, [pc, #188]	; (800505c <TIM_Base_SetConfig+0x114>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d027      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <TIM_Base_SetConfig+0x118>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d023      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <TIM_Base_SetConfig+0x11c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <TIM_Base_SetConfig+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <TIM_Base_SetConfig+0x124>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d017      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a28      	ldr	r2, [pc, #160]	; (8005070 <TIM_Base_SetConfig+0x128>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <TIM_Base_SetConfig+0x12c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a26      	ldr	r2, [pc, #152]	; (8005078 <TIM_Base_SetConfig+0x130>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <TIM_Base_SetConfig+0x134>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <TIM_Base_SetConfig+0x138>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a23      	ldr	r2, [pc, #140]	; (8005084 <TIM_Base_SetConfig+0x13c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d108      	bne.n	800500c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <TIM_Base_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0xf8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0c      	ldr	r2, [pc, #48]	; (800506c <TIM_Base_SetConfig+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800
 800507c:	40001800 	.word	0x40001800
 8005080:	40001c00 	.word	0x40001c00
 8005084:	40002000 	.word	0x40002000

08005088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 0302 	bic.w	r3, r3, #2
 80050d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a20      	ldr	r2, [pc, #128]	; (8005160 <TIM_OC1_SetConfig+0xd8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC1_SetConfig+0x64>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <TIM_OC1_SetConfig+0xdc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0308 	bic.w	r3, r3, #8
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a15      	ldr	r2, [pc, #84]	; (8005160 <TIM_OC1_SetConfig+0xd8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_OC1_SetConfig+0x8e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <TIM_OC1_SetConfig+0xdc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d111      	bne.n	800513a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400

08005168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0210 	bic.w	r2, r3, #16
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0320 	bic.w	r3, r3, #32
 80051b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a22      	ldr	r2, [pc, #136]	; (800524c <TIM_OC2_SetConfig+0xe4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC2_SetConfig+0x68>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a21      	ldr	r2, [pc, #132]	; (8005250 <TIM_OC2_SetConfig+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10d      	bne.n	80051ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <TIM_OC2_SetConfig+0xe4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC2_SetConfig+0x94>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <TIM_OC2_SetConfig+0xe8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d113      	bne.n	8005224 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40010400 	.word	0x40010400

08005254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a21      	ldr	r2, [pc, #132]	; (8005334 <TIM_OC3_SetConfig+0xe0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0x66>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a20      	ldr	r2, [pc, #128]	; (8005338 <TIM_OC3_SetConfig+0xe4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC3_SetConfig+0xe0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC3_SetConfig+0x92>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <TIM_OC3_SetConfig+0xe4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d113      	bne.n	800530e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <TIM_OC4_SetConfig+0xa4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC4_SetConfig+0x68>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <TIM_OC4_SetConfig+0xa8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d109      	bne.n	80053b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 030a 	bic.w	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	031b      	lsls	r3, r3, #12
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 0307 	orr.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	431a      	orrs	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2201      	movs	r2, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	43db      	mvns	r3, r3
 800553e:	401a      	ands	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	431a      	orrs	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e05a      	b.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a21      	ldr	r2, [pc, #132]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d01d      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1b      	ldr	r2, [pc, #108]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1a      	ldr	r2, [pc, #104]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a18      	ldr	r2, [pc, #96]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a17      	ldr	r2, [pc, #92]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10c      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4313      	orrs	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40001800 	.word	0x40001800

08005660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005688:	b084      	sub	sp, #16
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	f107 001c 	add.w	r0, r7, #28
 8005696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2b01      	cmp	r3, #1
 800569e:	d122      	bne.n	80056e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9c0 	bl	8005a60 <USB_CoreReset>
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
 80056e4:	e01a      	b.n	800571c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9b4 	bl	8005a60 <USB_CoreReset>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
 800570e:	e005      	b.n	800571c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10b      	bne.n	800573a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f043 0206 	orr.w	r2, r3, #6
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005746:	b004      	add	sp, #16
 8005748:	4770      	bx	lr

0800574a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 0201 	bic.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d115      	bne.n	80057dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057bc:	2001      	movs	r0, #1
 80057be:	f7fb fc4f 	bl	8001060 <HAL_Delay>
      ms++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f93a 	bl	8005a42 <USB_GetMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d01e      	beq.n	8005812 <USB_SetCurrentMode+0x84>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b31      	cmp	r3, #49	; 0x31
 80057d8:	d9f0      	bls.n	80057bc <USB_SetCurrentMode+0x2e>
 80057da:	e01a      	b.n	8005812 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d115      	bne.n	800580e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7fb fc36 	bl	8001060 <HAL_Delay>
      ms++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f921 	bl	8005a42 <USB_GetMode>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <USB_SetCurrentMode+0x84>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b31      	cmp	r3, #49	; 0x31
 800580a:	d9f0      	bls.n	80057ee <USB_SetCurrentMode+0x60>
 800580c:	e001      	b.n	8005812 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e005      	b.n	800581e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b32      	cmp	r3, #50	; 0x32
 8005816:	d101      	bne.n	800581c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <USB_FlushTxFifo+0x64>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e01b      	b.n	8005880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	daf2      	bge.n	8005836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	019b      	lsls	r3, r3, #6
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushTxFifo+0x64>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d0f0      	beq.n	8005860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a11      	ldr	r2, [pc, #68]	; (80058ec <USB_FlushRxFifo+0x5c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e018      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2210      	movs	r2, #16
 80058be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <USB_FlushRxFifo+0x5c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e006      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d0f0      	beq.n	80058c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	00030d40 	.word	0x00030d40

080058f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	460b      	mov	r3, r1
 8005900:	71fb      	strb	r3, [r7, #7]
 8005902:	4613      	mov	r3, r2
 8005904:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800590e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d123      	bne.n	800595e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005916:	88bb      	ldrh	r3, [r7, #4]
 8005918:	3303      	adds	r3, #3
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e018      	b.n	8005956 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	031a      	lsls	r2, r3, #12
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005930:	461a      	mov	r2, r3
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3301      	adds	r3, #1
 800594e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	3301      	adds	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d3e2      	bcc.n	8005924 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3724      	adds	r7, #36	; 0x24
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800596c:	b480      	push	{r7}
 800596e:	b08b      	sub	sp, #44	; 0x2c
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	b29b      	uxth	r3, r3
 8005988:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e014      	b.n	80059c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	3301      	adds	r3, #1
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3301      	adds	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	3301      	adds	r3, #1
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3e6      	bcc.n	8005998 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059ca:	8bfb      	ldrh	r3, [r7, #30]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01e      	beq.n	8005a0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059da:	461a      	mov	r2, r3
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	701a      	strb	r2, [r3, #0]
      i++;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	3301      	adds	r3, #1
 80059fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	3301      	adds	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a02:	8bfb      	ldrh	r3, [r7, #30]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a08:	8bfb      	ldrh	r3, [r7, #30]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ea      	bne.n	80059e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	372c      	adds	r7, #44	; 0x2c
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <USB_CoreReset+0x64>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e01b      	b.n	8005ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	daf2      	bge.n	8005a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <USB_CoreReset+0x64>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d0f0      	beq.n	8005a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	00030d40 	.word	0x00030d40

08005ac8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac8:	b084      	sub	sp, #16
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10a      	bne.n	8005b3a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e014      	b.n	8005b64 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e009      	b.n	8005b64 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b5e:	f023 0304 	bic.w	r3, r3, #4
 8005b62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b64:	2110      	movs	r1, #16
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fe5e 	bl	8005828 <USB_FlushTxFifo>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fe8a 	bl	8005890 <USB_FlushRxFifo>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	e015      	b.n	8005bb8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d3e5      	bcc.n	8005b8c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <USB_HostInit+0x16c>)
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <USB_HostInit+0x170>)
 8005bec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bf0:	e009      	b.n	8005c06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <USB_HostInit+0x174>)
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <USB_HostInit+0x178>)
 8005c02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f043 0210 	orr.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <USB_HostInit+0x17c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	01000200 	.word	0x01000200
 8005c38:	00e00300 	.word	0x00e00300
 8005c3c:	00600080 	.word	0x00600080
 8005c40:	004000e0 	.word	0x004000e0
 8005c44:	a3200008 	.word	0xa3200008

08005c48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d107      	bne.n	8005c9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c90:	461a      	mov	r2, r3
 8005c92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c96:	6053      	str	r3, [r2, #4]
 8005c98:	e009      	b.n	8005cae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d106      	bne.n	8005cae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005cac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cec:	2064      	movs	r0, #100	; 0x64
 8005cee:	f7fb f9b7 	bl	8001060 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d00:	200a      	movs	r0, #10
 8005d02:	f7fb f9ad 	bl	8001060 <HAL_Delay>

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <USB_DriveVbus+0x44>
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d109      	bne.n	8005d74 <USB_DriveVbus+0x64>
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	0c5b      	lsrs	r3, r3, #17
 8005da0:	f003 0303 	and.w	r3, r3, #3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	b29b      	uxth	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	70fb      	strb	r3, [r7, #3]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70bb      	strb	r3, [r7, #2]
 8005dea:	4613      	mov	r3, r2
 8005dec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d87e      	bhi.n	8005f10 <USB_HC_Init+0x13c>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <USB_HC_Init+0x44>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005ed3 	.word	0x08005ed3
 8005e20:	08005e29 	.word	0x08005e29
 8005e24:	08005e95 	.word	0x08005e95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	461a      	mov	r2, r3
 8005e36:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da10      	bge.n	8005e66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e64:	e057      	b.n	8005f16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d051      	beq.n	8005f16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e90:	60d3      	str	r3, [r2, #12]
      break;
 8005e92:	e040      	b.n	8005f16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ea6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ea8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da34      	bge.n	8005f1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ed0:	e023      	b.n	8005f1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f240 2325 	movw	r3, #549	; 0x225
 8005ee4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da17      	bge.n	8005f1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f0e:	e006      	b.n	8005f1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
      break;
 8005f14:	e004      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	2101      	movs	r1, #1
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	6939      	ldr	r1, [r7, #16]
 8005f56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da03      	bge.n	8005f7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e001      	b.n	8005f7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff feff 	bl	8005d82 <USB_GetHostSpeed>
 8005f84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d106      	bne.n	8005f9c <USB_HC_Init+0x1c8>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d003      	beq.n	8005f9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fa0:	787b      	ldrb	r3, [r7, #1]
 8005fa2:	059b      	lsls	r3, r3, #22
 8005fa4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fa8:	78bb      	ldrb	r3, [r7, #2]
 8005faa:	02db      	lsls	r3, r3, #11
 8005fac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fb6:	049b      	lsls	r3, r3, #18
 8005fb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fdc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d003      	beq.n	8005fee <USB_HC_Init+0x21a>
 8005fe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10f      	bne.n	800600e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	440a      	add	r2, r1
 8006004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800600c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800600e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	; 0x30
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006034:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02d      	beq.n	800609e <USB_HC_StartXfer+0x86>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d129      	bne.n	800609e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d117      	bne.n	8006080 <USB_HC_StartXfer+0x68>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	79db      	ldrb	r3, [r3, #7]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <USB_HC_StartXfer+0x48>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	79db      	ldrb	r3, [r3, #7]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d10f      	bne.n	8006080 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10b      	bne.n	800609e <USB_HC_StartXfer+0x86>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	795b      	ldrb	r3, [r3, #5]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	4619      	mov	r1, r3
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa0f 	bl	80064b8 <USB_DoPing>
      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e0f8      	b.n	8006290 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	8912      	ldrh	r2, [r2, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	3b01      	subs	r3, #1
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	8912      	ldrh	r2, [r2, #8]
 80060b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80060bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060be:	8b7b      	ldrh	r3, [r7, #26]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90b      	bls.n	80060dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80060c4:	8b7b      	ldrh	r3, [r7, #26]
 80060c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	8912      	ldrh	r2, [r2, #8]
 80060ce:	fb03 f202 	mul.w	r2, r3, r2
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	611a      	str	r2, [r3, #16]
 80060d6:	e001      	b.n	80060dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80060d8:	2301      	movs	r3, #1
 80060da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	8912      	ldrh	r2, [r2, #8]
 80060ea:	fb03 f202 	mul.w	r2, r3, r2
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	e003      	b.n	80060fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006106:	04d9      	lsls	r1, r3, #19
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <USB_HC_StartXfer+0x280>)
 800610a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800610c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	7a9b      	ldrb	r3, [r3, #10]
 8006112:	075b      	lsls	r3, r3, #29
 8006114:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	0148      	lsls	r0, r1, #5
 800611c:	6a39      	ldr	r1, [r7, #32]
 800611e:	4401      	add	r1, r0
 8006120:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006124:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006126:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68d9      	ldr	r1, [r3, #12]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613e:	460a      	mov	r2, r1
 8006140:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006174:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006178:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	7e7b      	ldrb	r3, [r7, #25]
 800618a:	075b      	lsls	r3, r3, #29
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	4401      	add	r1, r0
 8006194:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	e003      	b.n	80061ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e04e      	b.n	8006290 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	78db      	ldrb	r3, [r3, #3]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d149      	bne.n	800628e <USB_HC_StartXfer+0x276>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d045      	beq.n	800628e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	79db      	ldrb	r3, [r3, #7]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d830      	bhi.n	800626c <USB_HC_StartXfer+0x254>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <USB_HC_StartXfer+0x1f8>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006221 	.word	0x08006221
 8006214:	08006245 	.word	0x08006245
 8006218:	08006221 	.word	0x08006221
 800621c:	08006245 	.word	0x08006245
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	3303      	adds	r3, #3
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800622a:	8afa      	ldrh	r2, [r7, #22]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	b29b      	uxth	r3, r3
 8006232:	429a      	cmp	r2, r3
 8006234:	d91c      	bls.n	8006270 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]
        }
        break;
 8006242:	e015      	b.n	8006270 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	3303      	adds	r3, #3
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800624e:	8afa      	ldrh	r2, [r7, #22]
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	b29b      	uxth	r3, r3
 800625a:	429a      	cmp	r2, r3
 800625c:	d90a      	bls.n	8006274 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	619a      	str	r2, [r3, #24]
        }
        break;
 800626a:	e003      	b.n	8006274 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <USB_HC_StartXfer+0x25e>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <USB_HC_StartXfer+0x25e>
        break;
 8006274:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68d9      	ldr	r1, [r3, #12]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785a      	ldrb	r2, [r3, #1]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	b29b      	uxth	r3, r3
 8006284:	2000      	movs	r0, #0
 8006286:	9000      	str	r0, [sp, #0]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fb31 	bl	80058f0 <USB_WritePacket>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3728      	adds	r7, #40	; 0x28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	1ff80000 	.word	0x1ff80000

0800629c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	b29b      	uxth	r3, r3
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062be:	b480      	push	{r7}
 80062c0:	b089      	sub	sp, #36	; 0x24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	0c9b      	lsrs	r3, r3, #18
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	0fdb      	lsrs	r3, r3, #31
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d104      	bne.n	8006318 <USB_HC_Halt+0x5a>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e0c8      	b.n	80064aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USB_HC_Halt+0x66>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d163      	bne.n	80063ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006342:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 80ab 	bne.w	80064a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d133      	bne.n	80063c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800639c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063aa:	d81d      	bhi.n	80063e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c2:	d0ec      	beq.n	800639e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c4:	e070      	b.n	80064a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e6:	e05f      	b.n	80064a8 <USB_HC_Halt+0x1ea>
            break;
 80063e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063ea:	e05d      	b.n	80064a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800640a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d133      	bne.n	8006484 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	440a      	add	r2, r1
 8006432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800643a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006468:	d81d      	bhi.n	80064a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d0ec      	beq.n	800645c <USB_HC_Halt+0x19e>
 8006482:	e011      	b.n	80064a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e000      	b.n	80064a8 <USB_HC_Halt+0x1ea>
          break;
 80064a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3724      	adds	r7, #36	; 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	04da      	lsls	r2, r3, #19
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <USB_DoPing+0x74>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006500:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006508:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	1ff80000 	.word	0x1ff80000

08006530 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff f911 	bl	800576c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800654a:	2110      	movs	r1, #16
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff f96b 	bl	8005828 <USB_FlushTxFifo>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff f997 	bl	8005890 <USB_FlushRxFifo>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e01f      	b.n	80065b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006588:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006590:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006598:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	461a      	mov	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d9dc      	bls.n	8006572 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	e034      	b.n	8006628 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	461a      	mov	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006604:	d80c      	bhi.n	8006620 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661c:	d0ec      	beq.n	80065f8 <USB_StopHost+0xc8>
 800661e:	e000      	b.n	8006622 <USB_StopHost+0xf2>
        break;
 8006620:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3301      	adds	r3, #1
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d9c7      	bls.n	80065be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006634:	461a      	mov	r2, r3
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff f880 	bl	800574a <USB_EnableGlobalInt>

  return ret;
 800664a:	7ffb      	ldrb	r3, [r7, #31]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af04      	add	r7, sp, #16
 800665a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800665c:	2301      	movs	r3, #1
 800665e:	2202      	movs	r2, #2
 8006660:	2102      	movs	r1, #2
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc66 	bl	8006f34 <USBH_FindInterface>
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2bff      	cmp	r3, #255	; 0xff
 8006670:	d002      	beq.n	8006678 <USBH_CDC_InterfaceInit+0x24>
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d901      	bls.n	800667c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	e13d      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc3b 	bl	8006efc <USBH_SelectInterface>
 8006686:	4603      	mov	r3, r0
 8006688:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006690:	2302      	movs	r3, #2
 8006692:	e131      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800669a:	2050      	movs	r0, #80	; 0x50
 800669c:	f002 fad2 	bl	8008c44 <malloc>
 80066a0:	4603      	mov	r3, r0
 80066a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e11f      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80066b8:	2250      	movs	r2, #80	; 0x50
 80066ba:	2100      	movs	r1, #0
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f002 fb7d 	bl	8008dbc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	211a      	movs	r1, #26
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da15      	bge.n	8006706 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	211a      	movs	r1, #26
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 ff2e 	bl	800856e <USBH_AllocPipe>
 8006712:	4603      	mov	r3, r0
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7858      	ldrb	r0, [r3, #1]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	8952      	ldrh	r2, [r2, #10]
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	2203      	movs	r2, #3
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4623      	mov	r3, r4
 800673c:	4602      	mov	r2, r0
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fee6 	bl	8008510 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f002 f9f5 	bl	8008b3c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006752:	2300      	movs	r3, #0
 8006754:	2200      	movs	r2, #0
 8006756:	210a      	movs	r1, #10
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbeb 	bl	8006f34 <USBH_FindInterface>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2bff      	cmp	r3, #255	; 0xff
 8006766:	d002      	beq.n	800676e <USBH_CDC_InterfaceInit+0x11a>
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d901      	bls.n	8006772 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	e0c2      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	211a      	movs	r1, #26
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b25b      	sxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	da16      	bge.n	80067b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	211a      	movs	r1, #26
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	4413      	add	r3, r2
 8006796:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	211a      	movs	r1, #26
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067b0:	881a      	ldrh	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	835a      	strh	r2, [r3, #26]
 80067b6:	e015      	b.n	80067e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	211a      	movs	r1, #26
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	211a      	movs	r1, #26
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da16      	bge.n	800682a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	211a      	movs	r1, #26
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	f203 3356 	addw	r3, r3, #854	; 0x356
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	211a      	movs	r1, #26
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	835a      	strh	r2, [r3, #26]
 8006828:	e015      	b.n	8006856 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	211a      	movs	r1, #26
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	4413      	add	r3, r2
 8006836:	f203 3356 	addw	r3, r3, #854	; 0x356
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	211a      	movs	r1, #26
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	4413      	add	r3, r2
 800684c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b9b      	ldrb	r3, [r3, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fe86 	bl	800856e <USBH_AllocPipe>
 8006862:	4603      	mov	r3, r0
 8006864:	461a      	mov	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	7bdb      	ldrb	r3, [r3, #15]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fe7c 	bl	800856e <USBH_AllocPipe>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	7b59      	ldrb	r1, [r3, #13]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	7b98      	ldrb	r0, [r3, #14]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	8b12      	ldrh	r2, [r2, #24]
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2202      	movs	r2, #2
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4623      	mov	r3, r4
 80068a0:	4602      	mov	r2, r0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fe34 	bl	8008510 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	7b19      	ldrb	r1, [r3, #12]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	7bd8      	ldrb	r0, [r3, #15]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	8b52      	ldrh	r2, [r2, #26]
 80068c0:	9202      	str	r2, [sp, #8]
 80068c2:	2202      	movs	r2, #2
 80068c4:	9201      	str	r2, [sp, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4623      	mov	r3, r4
 80068ca:	4602      	mov	r2, r0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fe1f 	bl	8008510 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	2200      	movs	r2, #0
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 f92a 	bl	8008b3c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 f923 	bl	8008b3c <USBH_LL_SetToggle>

  return USBH_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}

08006900 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fe14 	bl	800854e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fe3f 	bl	80085b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	7b1b      	ldrb	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	7b1b      	ldrb	r3, [r3, #12]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fe01 	bl	800854e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	7b1b      	ldrb	r3, [r3, #12]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fe2c 	bl	80085b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	7b5b      	ldrb	r3, [r3, #13]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	7b5b      	ldrb	r3, [r3, #13]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fdee 	bl	800854e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7b5b      	ldrb	r3, [r3, #13]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe19 	bl	80085b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4618      	mov	r0, r3
 800699a:	f002 f95b 	bl	8008c54 <free>
    phost->pActiveClass->pData = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a4:	2200      	movs	r2, #0
 80069a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3340      	adds	r3, #64	; 0x40
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8b1 	bl	8006b32 <GetLineCoding>
 80069d0:	4603      	mov	r3, r0
 80069d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80069d4:	7afb      	ldrb	r3, [r7, #11]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e0:	2102      	movs	r1, #2
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069e6:	7afb      	ldrb	r3, [r7, #11]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d877      	bhi.n	8006b04 <USBH_CDC_Process+0x114>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBH_CDC_Process+0x2c>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a31 	.word	0x08006a31
 8006a20:	08006a37 	.word	0x08006a37
 8006a24:	08006a67 	.word	0x08006a67
 8006a28:	08006adb 	.word	0x08006adb
 8006a2c:	08006ae9 	.word	0x08006ae9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
      break;
 8006a34:	e06d      	b.n	8006b12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f897 	bl	8006b70 <SetLineCoding>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a54:	e058      	b.n	8006b08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d055      	beq.n	8006b08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a64:	e050      	b.n	8006b08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3340      	adds	r3, #64	; 0x40
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f860 	bl	8006b32 <GetLineCoding>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d126      	bne.n	8006aca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8e:	791b      	ldrb	r3, [r3, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d13b      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d133      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d12b      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d124      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f958 	bl	8006d78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ac8:	e020      	b.n	8006b0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d01d      	beq.n	8006b0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ad8:	e018      	b.n	8006b0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f867 	bl	8006bae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8da 	bl	8006c9a <CDC_ProcessReception>
      break;
 8006ae6:	e014      	b.n	8006b12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ffef 	bl	8007ace <USBH_ClrFeature>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b02:	e005      	b.n	8006b10 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b04:	bf00      	nop
 8006b06:	e004      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b10:	bf00      	nop

  }

  return status;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	22a1      	movs	r2, #161	; 0xa1
 8006b40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2221      	movs	r2, #33	; 0x21
 8006b46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2207      	movs	r2, #7
 8006b58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fa83 	bl	800806c <USBH_CtlReq>
 8006b66:	4603      	mov	r3, r0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2221      	movs	r2, #33	; 0x21
 8006b7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2207      	movs	r2, #7
 8006b96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fa64 	bl	800806c <USBH_CtlReq>
 8006ba4:	4603      	mov	r3, r0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af02      	add	r7, sp, #8
 8006bb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d002      	beq.n	8006bd4 <CDC_ProcessTransmission+0x26>
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d023      	beq.n	8006c1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006bd2:	e05e      	b.n	8006c92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	8b12      	ldrh	r2, [r2, #24]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d90b      	bls.n	8006bf8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8b1a      	ldrh	r2, [r3, #24]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	7b5b      	ldrb	r3, [r3, #13]
 8006bec:	2001      	movs	r0, #1
 8006bee:	9000      	str	r0, [sp, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fc4a 	bl	800848a <USBH_BulkSendData>
 8006bf6:	e00b      	b.n	8006c10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	7b5b      	ldrb	r3, [r3, #13]
 8006c06:	2001      	movs	r0, #1
 8006c08:	9000      	str	r0, [sp, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fc3d 	bl	800848a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c18:	e03b      	b.n	8006c92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 ff61 	bl	8008ae8 <USBH_LL_GetURBState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d128      	bne.n	8006c82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	8b12      	ldrh	r2, [r2, #24]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d90e      	bls.n	8006c5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	8b12      	ldrh	r2, [r2, #24]
 8006c44:	1a9a      	subs	r2, r3, r2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	8b12      	ldrh	r2, [r2, #24]
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	61da      	str	r2, [r3, #28]
 8006c58:	e002      	b.n	8006c60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c70:	e00e      	b.n	8006c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f868 	bl	8006d50 <USBH_CDC_TransmitCallback>
      break;
 8006c80:	e006      	b.n	8006c90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d103      	bne.n	8006c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c90:	bf00      	nop
  }
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d002      	beq.n	8006cc0 <CDC_ProcessReception+0x26>
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d00e      	beq.n	8006cdc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006cbe:	e043      	b.n	8006d48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6a19      	ldr	r1, [r3, #32]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	8b5a      	ldrh	r2, [r3, #26]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	7b1b      	ldrb	r3, [r3, #12]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fc01 	bl	80084d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cda:	e035      	b.n	8006d48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 ff00 	bl	8008ae8 <USBH_LL_GetURBState>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d129      	bne.n	8006d46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	7b1b      	ldrb	r3, [r3, #12]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fe63 	bl	80089c4 <USBH_LL_GetLastXferSize>
 8006cfe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d016      	beq.n	8006d38 <CDC_ProcessReception+0x9e>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	8b5b      	ldrh	r3, [r3, #26]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d910      	bls.n	8006d38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad2      	subs	r2, r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	441a      	add	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2203      	movs	r2, #3
 8006d32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d36:	e006      	b.n	8006d46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f80f 	bl	8006d64 <USBH_CDC_ReceiveCallback>
      break;
 8006d46:	bf00      	nop
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	e029      	b.n	8006df8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	79fa      	ldrb	r2, [r7, #7]
 8006da8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f81f 	bl	8006e00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fd33 	bl	800885c <USBH_LL_Init>

  return USBH_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e009      	b.n	8006e26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	33e0      	adds	r3, #224	; 0xe0
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d9f2      	bls.n	8006e12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e009      	b.n	8006e46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4c:	d3f1      	bcc.n	8006e32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d016      	beq.n	8006eea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10e      	bne.n	8006ee4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	33de      	adds	r3, #222	; 0xde
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	e004      	b.n	8006eee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	e001      	b.n	8006eee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d204      	bcs.n	8006f22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f20:	e001      	b.n	8006f26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	70fb      	strb	r3, [r7, #3]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70bb      	strb	r3, [r7, #2]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f5e:	e025      	b.n	8006fac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	221a      	movs	r2, #26
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	3308      	adds	r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3302      	adds	r3, #2
 8006f70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d002      	beq.n	8006f82 <USBH_FindInterface+0x4e>
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2bff      	cmp	r3, #255	; 0xff
 8006f80:	d111      	bne.n	8006fa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f86:	78ba      	ldrb	r2, [r7, #2]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d002      	beq.n	8006f92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f8c:	78bb      	ldrb	r3, [r7, #2]
 8006f8e:	2bff      	cmp	r3, #255	; 0xff
 8006f90:	d109      	bne.n	8006fa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f96:	787a      	ldrb	r2, [r7, #1]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f9c:	787b      	ldrb	r3, [r7, #1]
 8006f9e:	2bff      	cmp	r3, #255	; 0xff
 8006fa0:	d101      	bne.n	8006fa6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	e006      	b.n	8006fb4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d9d6      	bls.n	8006f60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fb2:	23ff      	movs	r3, #255	; 0xff
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fc83 	bl	80088d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006fce:	2101      	movs	r1, #1
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fd9c 	bl	8008b0e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d102      	bne.n	8007002 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2203      	movs	r2, #3
 8007000:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b0b      	cmp	r3, #11
 800700a:	f200 81be 	bhi.w	800738a <USBH_Process+0x3aa>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBH_Process+0x34>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007045 	.word	0x08007045
 8007018:	08007077 	.word	0x08007077
 800701c:	080070df 	.word	0x080070df
 8007020:	08007325 	.word	0x08007325
 8007024:	0800738b 	.word	0x0800738b
 8007028:	08007183 	.word	0x08007183
 800702c:	080072cb 	.word	0x080072cb
 8007030:	080071b9 	.word	0x080071b9
 8007034:	080071d9 	.word	0x080071d9
 8007038:	080071f9 	.word	0x080071f9
 800703c:	0800723d 	.word	0x0800723d
 8007040:	0800730d 	.word	0x0800730d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 819e 	beq.w	800738e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007058:	20c8      	movs	r0, #200	; 0xc8
 800705a:	f001 fd9f 	bl	8008b9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fc95 	bl	800898e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007074:	e18b      	b.n	800738e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800707c:	2b01      	cmp	r3, #1
 800707e:	d107      	bne.n	8007090 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800708e:	e18d      	b.n	80073ac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709a:	d914      	bls.n	80070c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070a2:	3301      	adds	r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d903      	bls.n	80070be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220d      	movs	r2, #13
 80070ba:	701a      	strb	r2, [r3, #0]
      break;
 80070bc:	e176      	b.n	80073ac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
      break;
 80070c4:	e172      	b.n	80073ac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070cc:	f103 020a 	add.w	r2, r3, #10
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80070d6:	200a      	movs	r0, #10
 80070d8:	f001 fd60 	bl	8008b9c <USBH_Delay>
      break;
 80070dc:	e166      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ee:	2104      	movs	r1, #4
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070f4:	2064      	movs	r0, #100	; 0x64
 80070f6:	f001 fd51 	bl	8008b9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fc20 	bl	8008940 <USBH_LL_GetSpeed>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2205      	movs	r2, #5
 800710e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fa2b 	bl	800856e <USBH_AllocPipe>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fa23 	bl	800856e <USBH_AllocPipe>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7919      	ldrb	r1, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007144:	b292      	uxth	r2, r2
 8007146:	9202      	str	r2, [sp, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	9201      	str	r2, [sp, #4]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4603      	mov	r3, r0
 8007150:	2280      	movs	r2, #128	; 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 f9dc 	bl	8008510 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7959      	ldrb	r1, [r3, #5]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800716c:	b292      	uxth	r2, r2
 800716e:	9202      	str	r2, [sp, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4603      	mov	r3, r0
 8007178:	2200      	movs	r2, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f9c8 	bl	8008510 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007180:	e114      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f918 	bl	80073b8 <USBH_HandleEnum>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 80fe 	bne.w	8007392 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d103      	bne.n	80071b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2208      	movs	r2, #8
 80071ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071ae:	e0f0      	b.n	8007392 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2207      	movs	r2, #7
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0ec      	b.n	8007392 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80e9 	beq.w	8007396 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071ca:	2101      	movs	r1, #1
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2208      	movs	r2, #8
 80071d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80071d6:	e0de      	b.n	8007396 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc2c 	bl	8007a40 <USBH_SetCfg>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 80d5 	bne.w	800739a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2209      	movs	r2, #9
 80071f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071f6:	e0d0      	b.n	800739a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc3c 	bl	8007a86 <USBH_SetFeature>
 800720e:	4603      	mov	r3, r0
 8007210:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	220a      	movs	r2, #10
 800721e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007220:	e0bd      	b.n	800739e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 80b9 	bne.w	800739e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220a      	movs	r2, #10
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	e0b4      	b.n	800739e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	220a      	movs	r2, #10
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e0b0      	b.n	800739e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80ad 	beq.w	80073a2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	e016      	b.n	8007284 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007256:	7bfa      	ldrb	r2, [r7, #15]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32de      	adds	r2, #222	; 0xde
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	791a      	ldrb	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007268:	429a      	cmp	r2, r3
 800726a:	d108      	bne.n	800727e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800726c:	7bfa      	ldrb	r2, [r7, #15]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32de      	adds	r2, #222	; 0xde
 8007272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800727c:	e005      	b.n	800728a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	3301      	adds	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0e5      	beq.n	8007256 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d016      	beq.n	80072c2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2206      	movs	r2, #6
 80072aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2103      	movs	r1, #3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b8:	e073      	b.n	80073a2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e06f      	b.n	80073a2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e06b      	b.n	80073a2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	220b      	movs	r2, #11
 80072f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072f2:	e058      	b.n	80073a6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d154      	bne.n	80073a6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	220d      	movs	r2, #13
 8007300:	701a      	strb	r2, [r3, #0]
      break;
 8007302:	e050      	b.n	80073a6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220d      	movs	r2, #13
 8007308:	701a      	strb	r2, [r3, #0]
      break;
 800730a:	e04c      	b.n	80073a6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d049      	beq.n	80073aa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      }
      break;
 8007322:	e042      	b.n	80073aa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff fd67 	bl	8006e00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007360:	2105      	movs	r1, #5
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d107      	bne.n	8007382 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe20 	bl	8006fc0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007380:	e014      	b.n	80073ac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 faa6 	bl	80088d4 <USBH_LL_Start>
      break;
 8007388:	e010      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800738a:	bf00      	nop
 800738c:	e00e      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800738e:	bf00      	nop
 8007390:	e00c      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 8007392:	bf00      	nop
 8007394:	e00a      	b.n	80073ac <USBH_Process+0x3cc>
    break;
 8007396:	bf00      	nop
 8007398:	e008      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800739a:	bf00      	nop
 800739c:	e006      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800739e:	bf00      	nop
 80073a0:	e004      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073aa:	bf00      	nop
  }
  return USBH_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop

080073b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af04      	add	r7, sp, #16
 80073be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	f200 81c1 	bhi.w	8007754 <USBH_HandleEnum+0x39c>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBH_HandleEnum+0x20>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f9 	.word	0x080073f9
 80073dc:	080074b7 	.word	0x080074b7
 80073e0:	08007521 	.word	0x08007521
 80073e4:	080075af 	.word	0x080075af
 80073e8:	08007619 	.word	0x08007619
 80073ec:	08007689 	.word	0x08007689
 80073f0:	080076cf 	.word	0x080076cf
 80073f4:	08007715 	.word	0x08007715
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073f8:	2108      	movs	r1, #8
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa50 	bl	80078a0 <USBH_Get_DevDesc>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d130      	bne.n	800746c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7919      	ldrb	r1, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800742e:	b292      	uxth	r2, r2
 8007430:	9202      	str	r2, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	9201      	str	r2, [sp, #4]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	4603      	mov	r3, r0
 800743a:	2280      	movs	r2, #128	; 0x80
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f867 	bl	8008510 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7959      	ldrb	r1, [r3, #5]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007456:	b292      	uxth	r2, r2
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	2200      	movs	r2, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f853 	bl	8008510 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800746a:	e175      	b.n	8007758 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b03      	cmp	r3, #3
 8007470:	f040 8172 	bne.w	8007758 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800747a:	3301      	adds	r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800748a:	2b03      	cmp	r3, #3
 800748c:	d903      	bls.n	8007496 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	220d      	movs	r2, #13
 8007492:	701a      	strb	r2, [r3, #0]
      break;
 8007494:	e160      	b.n	8007758 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	795b      	ldrb	r3, [r3, #5]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f887 	bl	80085b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	791b      	ldrb	r3, [r3, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f881 	bl	80085b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
      break;
 80074b4:	e150      	b.n	8007758 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80074b6:	2112      	movs	r1, #18
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9f1 	bl	80078a0 <USBH_Get_DevDesc>
 80074be:	4603      	mov	r3, r0
 80074c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ce:	e145      	b.n	800775c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	f040 8142 	bne.w	800775c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074de:	3301      	adds	r3, #1
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d903      	bls.n	80074fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	220d      	movs	r2, #13
 80074f6:	701a      	strb	r2, [r3, #0]
      break;
 80074f8:	e130      	b.n	800775c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	795b      	ldrb	r3, [r3, #5]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f855 	bl	80085b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	791b      	ldrb	r3, [r3, #4]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f84f 	bl	80085b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
      break;
 800751e:	e11d      	b.n	800775c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007520:	2101      	movs	r1, #1
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa68 	bl	80079f8 <USBH_SetAddress>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d132      	bne.n	8007598 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007532:	2002      	movs	r0, #2
 8007534:	f001 fb32 	bl	8008b9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2203      	movs	r2, #3
 8007544:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7919      	ldrb	r1, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800755a:	b292      	uxth	r2, r2
 800755c:	9202      	str	r2, [sp, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	9201      	str	r2, [sp, #4]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4603      	mov	r3, r0
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 ffd1 	bl	8008510 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7959      	ldrb	r1, [r3, #5]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007582:	b292      	uxth	r2, r2
 8007584:	9202      	str	r2, [sp, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	9201      	str	r2, [sp, #4]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	2200      	movs	r2, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ffbd 	bl	8008510 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007596:	e0e3      	b.n	8007760 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b03      	cmp	r3, #3
 800759c:	f040 80e0 	bne.w	8007760 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	220d      	movs	r2, #13
 80075a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	705a      	strb	r2, [r3, #1]
      break;
 80075ac:	e0d8      	b.n	8007760 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80075ae:	2109      	movs	r1, #9
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f99d 	bl	80078f0 <USBH_Get_CfgDesc>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075c6:	e0cd      	b.n	8007764 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	f040 80ca 	bne.w	8007764 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d6:	3301      	adds	r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d903      	bls.n	80075f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e0b8      	b.n	8007764 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	795b      	ldrb	r3, [r3, #5]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 ffd9 	bl	80085b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 ffd3 	bl	80085b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e0a5      	b.n	8007764 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f965 	bl	80078f0 <USBH_Get_CfgDesc>
 8007626:	4603      	mov	r3, r0
 8007628:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2205      	movs	r2, #5
 8007634:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007636:	e097      	b.n	8007768 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b03      	cmp	r3, #3
 800763c:	f040 8094 	bne.w	8007768 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007646:	3301      	adds	r3, #1
 8007648:	b2da      	uxtb	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007656:	2b03      	cmp	r3, #3
 8007658:	d903      	bls.n	8007662 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	220d      	movs	r2, #13
 800765e:	701a      	strb	r2, [r3, #0]
      break;
 8007660:	e082      	b.n	8007768 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 ffa1 	bl	80085b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	791b      	ldrb	r3, [r3, #4]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ff9b 	bl	80085b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e06f      	b.n	8007768 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800768e:	2b00      	cmp	r3, #0
 8007690:	d019      	beq.n	80076c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800769e:	23ff      	movs	r3, #255	; 0xff
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f949 	bl	8007938 <USBH_Get_StringDesc>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2206      	movs	r2, #6
 80076b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076b6:	e059      	b.n	800776c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d156      	bne.n	800776c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2206      	movs	r2, #6
 80076c2:	705a      	strb	r2, [r3, #1]
      break;
 80076c4:	e052      	b.n	800776c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2206      	movs	r2, #6
 80076ca:	705a      	strb	r2, [r3, #1]
      break;
 80076cc:	e04e      	b.n	800776c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d019      	beq.n	800770c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076e4:	23ff      	movs	r3, #255	; 0xff
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f926 	bl	8007938 <USBH_Get_StringDesc>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2207      	movs	r2, #7
 80076fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076fc:	e038      	b.n	8007770 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d135      	bne.n	8007770 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2207      	movs	r2, #7
 8007708:	705a      	strb	r2, [r3, #1]
      break;
 800770a:	e031      	b.n	8007770 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2207      	movs	r2, #7
 8007710:	705a      	strb	r2, [r3, #1]
      break;
 8007712:	e02d      	b.n	8007770 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800772a:	23ff      	movs	r3, #255	; 0xff
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f903 	bl	8007938 <USBH_Get_StringDesc>
 8007732:	4603      	mov	r3, r0
 8007734:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007740:	e018      	b.n	8007774 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d115      	bne.n	8007774 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
      break;
 800774c:	e012      	b.n	8007774 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
      break;
 8007752:	e00f      	b.n	8007774 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007754:	bf00      	nop
 8007756:	e00e      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007758:	bf00      	nop
 800775a:	e00c      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 800775c:	bf00      	nop
 800775e:	e00a      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007760:	bf00      	nop
 8007762:	e008      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007764:	bf00      	nop
 8007766:	e006      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007768:	bf00      	nop
 800776a:	e004      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 800776c:	bf00      	nop
 800776e:	e002      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007770:	bf00      	nop
 8007772:	e000      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007774:	bf00      	nop
  }
  return Status;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f804 	bl	80077c2 <USBH_HandleSof>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b0b      	cmp	r3, #11
 80077d2:	d10a      	bne.n	80077ea <USBH_HandleSof+0x28>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
  }
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007802:	bf00      	nop
}
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800781e:	bf00      	nop
}
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f846 	bl	800890a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	791b      	ldrb	r3, [r3, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fe93 	bl	80085b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	795b      	ldrb	r3, [r3, #5]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fe8d 	bl	80085b0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078be:	2100      	movs	r1, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f864 	bl	800798e <USBH_GetDescriptor>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	b292      	uxth	r2, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	f000 f919 	bl	8007b18 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	331c      	adds	r3, #28
 8007900:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f83d 	bl	800798e <USBH_GetDescriptor>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	461a      	mov	r2, r3
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f989 	bl	8007c3c <USBH_ParseCfgDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	461a      	mov	r2, r3
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
 8007948:	4613      	mov	r3, r2
 800794a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	b29b      	uxth	r3, r3
 8007950:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007954:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	460b      	mov	r3, r1
 8007962:	2100      	movs	r1, #0
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f812 	bl	800798e <USBH_GetDescriptor>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800797a:	893a      	ldrh	r2, [r7, #8]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fb26 	bl	8007fd0 <USBH_ParseStringDesc>
  }

  return status;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	72fb      	strb	r3, [r7, #11]
 800799c:	4613      	mov	r3, r2
 800799e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	789b      	ldrb	r3, [r3, #2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11c      	bne.n	80079e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2206      	movs	r2, #6
 80079b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	893a      	ldrh	r2, [r7, #8]
 80079be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80079c0:	893b      	ldrh	r3, [r7, #8]
 80079c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d104      	bne.n	80079d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f240 4209 	movw	r2, #1033	; 0x409
 80079d2:	829a      	strh	r2, [r3, #20]
 80079d4:	e002      	b.n	80079dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8b3a      	ldrh	r2, [r7, #24]
 80079e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80079e2:	8b3b      	ldrh	r3, [r7, #24]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fb3f 	bl	800806c <USBH_CtlReq>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	789b      	ldrb	r3, [r3, #2]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10f      	bne.n	8007a2c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2205      	movs	r2, #5
 8007a16:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb1b 	bl	800806c <USBH_CtlReq>
 8007a36:	4603      	mov	r3, r0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10e      	bne.n	8007a72 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2209      	movs	r2, #9
 8007a5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	887a      	ldrh	r2, [r7, #2]
 8007a64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 faf8 	bl	800806c <USBH_CtlReq>
 8007a7c:	4603      	mov	r3, r0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	789b      	ldrb	r3, [r3, #2]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d10f      	bne.n	8007aba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fad4 	bl	800806c <USBH_CtlReq>
 8007ac4:	4603      	mov	r3, r0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	789b      	ldrb	r3, [r3, #2]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10f      	bne.n	8007b02 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fab0 	bl	800806c <USBH_CtlReq>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	785a      	ldrb	r2, [r3, #1]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	3302      	adds	r3, #2
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3303      	adds	r3, #3
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	791a      	ldrb	r2, [r3, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	795a      	ldrb	r2, [r3, #5]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	799a      	ldrb	r2, [r3, #6]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	79da      	ldrb	r2, [r3, #7]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	79db      	ldrb	r3, [r3, #7]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	dc0f      	bgt.n	8007b9a <USBH_ParseDevDesc+0x82>
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	db14      	blt.n	8007ba8 <USBH_ParseDevDesc+0x90>
 8007b7e:	3b08      	subs	r3, #8
 8007b80:	4a2d      	ldr	r2, [pc, #180]	; (8007c38 <USBH_ParseDevDesc+0x120>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bf14      	ite	ne
 8007b8e:	2301      	movne	r3, #1
 8007b90:	2300      	moveq	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <USBH_ParseDevDesc+0x86>
 8007b98:	e006      	b.n	8007ba8 <USBH_ParseDevDesc+0x90>
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d104      	bne.n	8007ba8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	79da      	ldrb	r2, [r3, #7]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	71da      	strb	r2, [r3, #7]
      break;
 8007ba6:	e003      	b.n	8007bb0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2240      	movs	r2, #64	; 0x40
 8007bac:	71da      	strb	r2, [r3, #7]
      break;
 8007bae:	bf00      	nop
  }

  if (length > 8U)
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d939      	bls.n	8007c2a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	3309      	adds	r3, #9
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	330a      	adds	r3, #10
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	330b      	adds	r3, #11
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	330d      	adds	r3, #13
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	7b9a      	ldrb	r2, [r3, #14]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	7bda      	ldrb	r2, [r3, #15]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	7c1a      	ldrb	r2, [r3, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7c5a      	ldrb	r2, [r3, #17]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	745a      	strb	r2, [r3, #17]
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	01000101 	.word	0x01000101

08007c3c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08c      	sub	sp, #48	; 0x30
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c50:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	785a      	ldrb	r2, [r3, #1]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	3302      	adds	r3, #2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	3303      	adds	r3, #3
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c98:	bf28      	it	cs
 8007c9a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	791a      	ldrb	r2, [r3, #4]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	795a      	ldrb	r2, [r3, #5]
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	799a      	ldrb	r2, [r3, #6]
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	79da      	ldrb	r2, [r3, #7]
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	7a1a      	ldrb	r2, [r3, #8]
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b09      	cmp	r3, #9
 8007cd2:	d002      	beq.n	8007cda <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2209      	movs	r2, #9
 8007cd8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	2b09      	cmp	r3, #9
 8007cde:	f240 809d 	bls.w	8007e1c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ce2:	2309      	movs	r3, #9
 8007ce4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cea:	e081      	b.n	8007df0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cec:	f107 0316 	add.w	r3, r7, #22
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf4:	f000 f99f 	bl	8008036 <USBH_GetNextDesc>
 8007cf8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d176      	bne.n	8007df0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d002      	beq.n	8007d10 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	2209      	movs	r2, #9
 8007d0e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d14:	221a      	movs	r2, #26
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	4413      	add	r3, r2
 8007d20:	3302      	adds	r3, #2
 8007d22:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	69f8      	ldr	r0, [r7, #28]
 8007d28:	f000 f87e 	bl	8007e28 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d36:	e043      	b.n	8007dc0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d38:	f107 0316 	add.w	r3, r7, #22
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d40:	f000 f979 	bl	8008036 <USBH_GetNextDesc>
 8007d44:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d138      	bne.n	8007dc0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	795b      	ldrb	r3, [r3, #5]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10f      	bne.n	8007d76 <USBH_ParseCfgDesc+0x13a>
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	799b      	ldrb	r3, [r3, #6]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d10b      	bne.n	8007d76 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	79db      	ldrb	r3, [r3, #7]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10f      	bne.n	8007d86 <USBH_ParseCfgDesc+0x14a>
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d00b      	beq.n	8007d86 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	2209      	movs	r2, #9
 8007d72:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d74:	e007      	b.n	8007d86 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b07      	cmp	r3, #7
 8007d7c:	d004      	beq.n	8007d88 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	2207      	movs	r2, #7
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e000      	b.n	8007d88 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d86:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d90:	3201      	adds	r2, #1
 8007d92:	00d2      	lsls	r2, r2, #3
 8007d94:	211a      	movs	r1, #26
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	4413      	add	r3, r2
 8007da2:	3304      	adds	r3, #4
 8007da4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da8:	69b9      	ldr	r1, [r7, #24]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f86b 	bl	8007e86 <USBH_ParseEPDesc>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	791b      	ldrb	r3, [r3, #4]
 8007dc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d204      	bcs.n	8007dd6 <USBH_ParseCfgDesc+0x19a>
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	885a      	ldrh	r2, [r3, #2]
 8007dd0:	8afb      	ldrh	r3, [r7, #22]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d8b0      	bhi.n	8007d38 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	791b      	ldrb	r3, [r3, #4]
 8007dda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d201      	bcs.n	8007de6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e01c      	b.n	8007e20 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dea:	3301      	adds	r3, #1
 8007dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d805      	bhi.n	8007e04 <USBH_ParseCfgDesc+0x1c8>
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	885a      	ldrh	r2, [r3, #2]
 8007dfc:	8afb      	ldrh	r3, [r7, #22]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f63f af74 	bhi.w	8007cec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	791b      	ldrb	r3, [r3, #4]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	bf28      	it	cs
 8007e0c:	2302      	movcs	r3, #2
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d201      	bcs.n	8007e1c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e001      	b.n	8007e20 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3730      	adds	r7, #48	; 0x30
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	785a      	ldrb	r2, [r3, #1]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	789a      	ldrb	r2, [r3, #2]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	78da      	ldrb	r2, [r3, #3]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	791a      	ldrb	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	795a      	ldrb	r2, [r3, #5]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	799a      	ldrb	r2, [r3, #6]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	79da      	ldrb	r2, [r3, #7]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	7a1a      	ldrb	r2, [r3, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	721a      	strb	r2, [r3, #8]
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	785a      	ldrb	r2, [r3, #1]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	789a      	ldrb	r2, [r3, #2]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	78da      	ldrb	r2, [r3, #3]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3305      	adds	r3, #5
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	799a      	ldrb	r2, [r3, #6]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	889b      	ldrh	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	75fb      	strb	r3, [r7, #23]
 8007ee6:	e033      	b.n	8007f50 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	889b      	ldrh	r3, [r3, #4]
 8007eec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ef0:	f023 0307 	bic.w	r3, r3, #7
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	b21a      	sxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	b299      	uxth	r1, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3305      	adds	r3, #5
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	430b      	orrs	r3, r1
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d110      	bne.n	8007f42 <USBH_ParseEPDesc+0xbc>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b299      	uxth	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3305      	adds	r3, #5
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	430b      	orrs	r3, r1
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	b21b      	sxth	r3, r3
 8007f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	e001      	b.n	8007f46 <USBH_ParseEPDesc+0xc0>
 8007f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b21b      	sxth	r3, r3
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d116      	bne.n	8007f88 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d005      	beq.n	8007f72 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	78db      	ldrb	r3, [r3, #3]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d127      	bne.n	8007fc2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	799b      	ldrb	r3, [r3, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <USBH_ParseEPDesc+0xfc>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	799b      	ldrb	r3, [r3, #6]
 8007f7e:	2b10      	cmp	r3, #16
 8007f80:	d91f      	bls.n	8007fc2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f82:	2303      	movs	r3, #3
 8007f84:	75fb      	strb	r3, [r7, #23]
 8007f86:	e01c      	b.n	8007fc2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	78db      	ldrb	r3, [r3, #3]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d10a      	bne.n	8007faa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	799b      	ldrb	r3, [r3, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <USBH_ParseEPDesc+0x11e>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	799b      	ldrb	r3, [r3, #6]
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d90e      	bls.n	8007fc2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	75fb      	strb	r3, [r7, #23]
 8007fa8:	e00b      	b.n	8007fc2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	78db      	ldrb	r3, [r3, #3]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d105      	bne.n	8007fc2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	799b      	ldrb	r3, [r3, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d120      	bne.n	800802a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	1e9a      	subs	r2, r3, #2
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	bf28      	it	cs
 8007ff4:	4613      	movcs	r3, r2
 8007ff6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ffe:	2300      	movs	r3, #0
 8008000:	82fb      	strh	r3, [r7, #22]
 8008002:	e00b      	b.n	800801c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008004:	8afb      	ldrh	r3, [r7, #22]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	3301      	adds	r3, #1
 8008014:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	3302      	adds	r3, #2
 800801a:	82fb      	strh	r3, [r7, #22]
 800801c:	8afa      	ldrh	r2, [r7, #22]
 800801e:	8abb      	ldrh	r3, [r7, #20]
 8008020:	429a      	cmp	r2, r3
 8008022:	d3ef      	bcc.n	8008004 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
  }
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	4413      	add	r3, r2
 800804c:	b29a      	uxth	r2, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4413      	add	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800805e:	68fb      	ldr	r3, [r7, #12]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	789b      	ldrb	r3, [r3, #2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d002      	beq.n	800808c <USBH_CtlReq+0x20>
 8008086:	2b02      	cmp	r3, #2
 8008088:	d00f      	beq.n	80080aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800808a:	e027      	b.n	80080dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080a4:	2301      	movs	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
      break;
 80080a8:	e018      	b.n	80080dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f81c 	bl	80080e8 <USBH_HandleControl>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <USBH_CtlReq+0x54>
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d106      	bne.n	80080ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	761a      	strb	r2, [r3, #24]
      break;
 80080cc:	e005      	b.n	80080da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d102      	bne.n	80080da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	709a      	strb	r2, [r3, #2]
      break;
 80080da:	bf00      	nop
  }
  return status;
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	7e1b      	ldrb	r3, [r3, #24]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	2b0a      	cmp	r3, #10
 8008100:	f200 8156 	bhi.w	80083b0 <USBH_HandleControl+0x2c8>
 8008104:	a201      	add	r2, pc, #4	; (adr r2, 800810c <USBH_HandleControl+0x24>)
 8008106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810a:	bf00      	nop
 800810c:	08008139 	.word	0x08008139
 8008110:	08008153 	.word	0x08008153
 8008114:	080081bd 	.word	0x080081bd
 8008118:	080081e3 	.word	0x080081e3
 800811c:	0800821b 	.word	0x0800821b
 8008120:	08008245 	.word	0x08008245
 8008124:	08008297 	.word	0x08008297
 8008128:	080082b9 	.word	0x080082b9
 800812c:	080082f5 	.word	0x080082f5
 8008130:	0800831b 	.word	0x0800831b
 8008134:	08008359 	.word	0x08008359
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f103 0110 	add.w	r1, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	795b      	ldrb	r3, [r3, #5]
 8008142:	461a      	mov	r2, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f943 	bl	80083d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2202      	movs	r2, #2
 800814e:	761a      	strb	r2, [r3, #24]
      break;
 8008150:	e139      	b.n	80083c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	795b      	ldrb	r3, [r3, #5]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fcc5 	bl	8008ae8 <USBH_LL_GetURBState>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d11e      	bne.n	80081a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7c1b      	ldrb	r3, [r3, #16]
 800816c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008170:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	8adb      	ldrh	r3, [r3, #22]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800817a:	7b7b      	ldrb	r3, [r7, #13]
 800817c:	2b80      	cmp	r3, #128	; 0x80
 800817e:	d103      	bne.n	8008188 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2203      	movs	r2, #3
 8008184:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008186:	e115      	b.n	80083b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2205      	movs	r2, #5
 800818c:	761a      	strb	r2, [r3, #24]
      break;
 800818e:	e111      	b.n	80083b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008190:	7b7b      	ldrb	r3, [r7, #13]
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d103      	bne.n	800819e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2209      	movs	r2, #9
 800819a:	761a      	strb	r2, [r3, #24]
      break;
 800819c:	e10a      	b.n	80083b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2207      	movs	r2, #7
 80081a2:	761a      	strb	r2, [r3, #24]
      break;
 80081a4:	e106      	b.n	80083b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d003      	beq.n	80081b4 <USBH_HandleControl+0xcc>
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	f040 8100 	bne.w	80083b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	220b      	movs	r2, #11
 80081b8:	761a      	strb	r2, [r3, #24]
      break;
 80081ba:	e0fb      	b.n	80083b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6899      	ldr	r1, [r3, #8]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	899a      	ldrh	r2, [r3, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f93a 	bl	800844e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2204      	movs	r2, #4
 80081de:	761a      	strb	r2, [r3, #24]
      break;
 80081e0:	e0f1      	b.n	80083c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	791b      	ldrb	r3, [r3, #4]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fc7d 	bl	8008ae8 <USBH_LL_GetURBState>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d102      	bne.n	80081fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2209      	movs	r2, #9
 80081fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b05      	cmp	r3, #5
 8008202:	d102      	bne.n	800820a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008204:	2303      	movs	r3, #3
 8008206:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008208:	e0d6      	b.n	80083b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b04      	cmp	r3, #4
 800820e:	f040 80d3 	bne.w	80083b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220b      	movs	r2, #11
 8008216:	761a      	strb	r2, [r3, #24]
      break;
 8008218:	e0ce      	b.n	80083b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6899      	ldr	r1, [r3, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	899a      	ldrh	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	795b      	ldrb	r3, [r3, #5]
 8008226:	2001      	movs	r0, #1
 8008228:	9000      	str	r0, [sp, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8ea 	bl	8008404 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2206      	movs	r2, #6
 8008240:	761a      	strb	r2, [r3, #24]
      break;
 8008242:	e0c0      	b.n	80083c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	795b      	ldrb	r3, [r3, #5]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fc4c 	bl	8008ae8 <USBH_LL_GetURBState>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d103      	bne.n	8008262 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2207      	movs	r2, #7
 800825e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008260:	e0ac      	b.n	80083bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b05      	cmp	r3, #5
 8008266:	d105      	bne.n	8008274 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	220c      	movs	r2, #12
 800826c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800826e:	2303      	movs	r3, #3
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e0a3      	b.n	80083bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d103      	bne.n	8008282 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2205      	movs	r2, #5
 800827e:	761a      	strb	r2, [r3, #24]
      break;
 8008280:	e09c      	b.n	80083bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b04      	cmp	r3, #4
 8008286:	f040 8099 	bne.w	80083bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220b      	movs	r2, #11
 800828e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008290:	2302      	movs	r3, #2
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e092      	b.n	80083bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8d5 	bl	800844e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2208      	movs	r2, #8
 80082b4:	761a      	strb	r2, [r3, #24]

      break;
 80082b6:	e086      	b.n	80083c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	791b      	ldrb	r3, [r3, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc12 	bl	8008ae8 <USBH_LL_GetURBState>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d105      	bne.n	80082da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	220d      	movs	r2, #13
 80082d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082d8:	e072      	b.n	80083c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d103      	bne.n	80082e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	220b      	movs	r2, #11
 80082e4:	761a      	strb	r2, [r3, #24]
      break;
 80082e6:	e06b      	b.n	80083c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d168      	bne.n	80083c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e065      	b.n	80083c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	795b      	ldrb	r3, [r3, #5]
 80082f8:	2201      	movs	r2, #1
 80082fa:	9200      	str	r2, [sp, #0]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f87f 	bl	8008404 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800830c:	b29a      	uxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	220a      	movs	r2, #10
 8008316:	761a      	strb	r2, [r3, #24]
      break;
 8008318:	e055      	b.n	80083c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	795b      	ldrb	r3, [r3, #5]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fbe1 	bl	8008ae8 <USBH_LL_GetURBState>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d105      	bne.n	800833c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	220d      	movs	r2, #13
 8008338:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800833a:	e043      	b.n	80083c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d103      	bne.n	800834a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2209      	movs	r2, #9
 8008346:	761a      	strb	r2, [r3, #24]
      break;
 8008348:	e03c      	b.n	80083c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d139      	bne.n	80083c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220b      	movs	r2, #11
 8008354:	761a      	strb	r2, [r3, #24]
      break;
 8008356:	e035      	b.n	80083c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7e5b      	ldrb	r3, [r3, #25]
 800835c:	3301      	adds	r3, #1
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	765a      	strb	r2, [r3, #25]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7e5b      	ldrb	r3, [r3, #25]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d806      	bhi.n	800837a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008378:	e025      	b.n	80083c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008380:	2106      	movs	r1, #6
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	795b      	ldrb	r3, [r3, #5]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f90c 	bl	80085b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	791b      	ldrb	r3, [r3, #4]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f906 	bl	80085b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
      break;
 80083ae:	e00a      	b.n	80083c6 <USBH_HandleControl+0x2de>

    default:
      break;
 80083b0:	bf00      	nop
 80083b2:	e008      	b.n	80083c6 <USBH_HandleControl+0x2de>
      break;
 80083b4:	bf00      	nop
 80083b6:	e006      	b.n	80083c6 <USBH_HandleControl+0x2de>
      break;
 80083b8:	bf00      	nop
 80083ba:	e004      	b.n	80083c6 <USBH_HandleControl+0x2de>
      break;
 80083bc:	bf00      	nop
 80083be:	e002      	b.n	80083c6 <USBH_HandleControl+0x2de>
      break;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <USBH_HandleControl+0x2de>
      break;
 80083c4:	bf00      	nop
  }

  return status;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083de:	79f9      	ldrb	r1, [r7, #7]
 80083e0:	2300      	movs	r3, #0
 80083e2:	9303      	str	r3, [sp, #12]
 80083e4:	2308      	movs	r3, #8
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	2300      	movs	r3, #0
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	2300      	movs	r3, #0
 80083f2:	2200      	movs	r2, #0
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fb46 	bl	8008a86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af04      	add	r7, sp, #16
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4611      	mov	r1, r2
 8008410:	461a      	mov	r2, r3
 8008412:	460b      	mov	r3, r1
 8008414:	80fb      	strh	r3, [r7, #6]
 8008416:	4613      	mov	r3, r2
 8008418:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008428:	7979      	ldrb	r1, [r7, #5]
 800842a:	7e3b      	ldrb	r3, [r7, #24]
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	9302      	str	r3, [sp, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	2301      	movs	r3, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	2200      	movs	r2, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fb21 	bl	8008a86 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b088      	sub	sp, #32
 8008452:	af04      	add	r7, sp, #16
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	4611      	mov	r1, r2
 800845a:	461a      	mov	r2, r3
 800845c:	460b      	mov	r3, r1
 800845e:	80fb      	strh	r3, [r7, #6]
 8008460:	4613      	mov	r3, r2
 8008462:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008464:	7979      	ldrb	r1, [r7, #5]
 8008466:	2300      	movs	r3, #0
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	9302      	str	r3, [sp, #8]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	2301      	movs	r3, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	2201      	movs	r2, #1
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fb03 	bl	8008a86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008480:	2300      	movs	r3, #0

}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b088      	sub	sp, #32
 800848e:	af04      	add	r7, sp, #16
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	4611      	mov	r1, r2
 8008496:	461a      	mov	r2, r3
 8008498:	460b      	mov	r3, r1
 800849a:	80fb      	strh	r3, [r7, #6]
 800849c:	4613      	mov	r3, r2
 800849e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ae:	7979      	ldrb	r1, [r7, #5]
 80084b0:	7e3b      	ldrb	r3, [r7, #24]
 80084b2:	9303      	str	r3, [sp, #12]
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2301      	movs	r3, #1
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2302      	movs	r3, #2
 80084c2:	2200      	movs	r2, #0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fade 	bl	8008a86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af04      	add	r7, sp, #16
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4611      	mov	r1, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	460b      	mov	r3, r1
 80084e4:	80fb      	strh	r3, [r7, #6]
 80084e6:	4613      	mov	r3, r2
 80084e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ea:	7979      	ldrb	r1, [r7, #5]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	2301      	movs	r3, #1
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2302      	movs	r3, #2
 80084fe:	2201      	movs	r2, #1
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fac0 	bl	8008a86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af04      	add	r7, sp, #16
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	461a      	mov	r2, r3
 800851e:	4603      	mov	r3, r0
 8008520:	70fb      	strb	r3, [r7, #3]
 8008522:	460b      	mov	r3, r1
 8008524:	70bb      	strb	r3, [r7, #2]
 8008526:	4613      	mov	r3, r2
 8008528:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800852a:	7878      	ldrb	r0, [r7, #1]
 800852c:	78ba      	ldrb	r2, [r7, #2]
 800852e:	78f9      	ldrb	r1, [r7, #3]
 8008530:	8b3b      	ldrh	r3, [r7, #24]
 8008532:	9302      	str	r3, [sp, #8]
 8008534:	7d3b      	ldrb	r3, [r7, #20]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	7c3b      	ldrb	r3, [r7, #16]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4603      	mov	r3, r0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa53 	bl	80089ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa72 	bl	8008a48 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f836 	bl	80085ec <USBH_GetFreePipe>
 8008580:	4603      	mov	r3, r0
 8008582:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800858a:	4293      	cmp	r3, r2
 800858c:	d00a      	beq.n	80085a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	33e0      	adds	r3, #224	; 0xe0
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80085a4:	89fb      	ldrh	r3, [r7, #14]
 80085a6:	b2db      	uxtb	r3, r3
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	2b0f      	cmp	r3, #15
 80085c0:	d80d      	bhi.n	80085de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	33e0      	adds	r3, #224	; 0xe0
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	33e0      	adds	r3, #224	; 0xe0
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e00f      	b.n	800861e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	33e0      	adds	r3, #224	; 0xe0
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	b29b      	uxth	r3, r3
 8008616:	e007      	b.n	8008628 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	3301      	adds	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	2b0f      	cmp	r3, #15
 8008622:	d9ec      	bls.n	80085fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008624:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008638:	2201      	movs	r2, #1
 800863a:	490e      	ldr	r1, [pc, #56]	; (8008674 <MX_USB_HOST_Init+0x40>)
 800863c:	480e      	ldr	r0, [pc, #56]	; (8008678 <MX_USB_HOST_Init+0x44>)
 800863e:	f7fe fba5 	bl	8006d8c <USBH_Init>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008648:	f7f8 fa4c 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800864c:	490b      	ldr	r1, [pc, #44]	; (800867c <MX_USB_HOST_Init+0x48>)
 800864e:	480a      	ldr	r0, [pc, #40]	; (8008678 <MX_USB_HOST_Init+0x44>)
 8008650:	f7fe fc2a 	bl	8006ea8 <USBH_RegisterClass>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800865a:	f7f8 fa43 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800865e:	4806      	ldr	r0, [pc, #24]	; (8008678 <MX_USB_HOST_Init+0x44>)
 8008660:	f7fe fcae 	bl	8006fc0 <USBH_Start>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800866a:	f7f8 fa3b 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	08008695 	.word	0x08008695
 8008678:	200001dc 	.word	0x200001dc
 800867c:	2000000c 	.word	0x2000000c

08008680 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008684:	4802      	ldr	r0, [pc, #8]	; (8008690 <MX_USB_HOST_Process+0x10>)
 8008686:	f7fe fcab 	bl	8006fe0 <USBH_Process>
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200001dc 	.word	0x200001dc

08008694 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d819      	bhi.n	80086dc <USBH_UserProcess+0x48>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USBH_UserProcess+0x1c>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086dd 	.word	0x080086dd
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086d5 	.word	0x080086d5
 80086c0:	080086c5 	.word	0x080086c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <USBH_UserProcess+0x58>)
 80086c6:	2203      	movs	r2, #3
 80086c8:	701a      	strb	r2, [r3, #0]
  break;
 80086ca:	e008      	b.n	80086de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <USBH_UserProcess+0x58>)
 80086ce:	2202      	movs	r2, #2
 80086d0:	701a      	strb	r2, [r3, #0]
  break;
 80086d2:	e004      	b.n	80086de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <USBH_UserProcess+0x58>)
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
  break;
 80086da:	e000      	b.n	80086de <USBH_UserProcess+0x4a>

  default:
  break;
 80086dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	200005b4 	.word	0x200005b4

080086f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	; 0x28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f8:	f107 0314 	add.w	r3, r7, #20
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	609a      	str	r2, [r3, #8]
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008710:	d147      	bne.n	80087a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	4b25      	ldr	r3, [pc, #148]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	4a24      	ldr	r2, [pc, #144]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6313      	str	r3, [r2, #48]	; 0x30
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800872e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008738:	2300      	movs	r3, #0
 800873a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800873c:	f107 0314 	add.w	r3, r7, #20
 8008740:	4619      	mov	r1, r3
 8008742:	481b      	ldr	r0, [pc, #108]	; (80087b0 <HAL_HCD_MspInit+0xc0>)
 8008744:	f7f8 fdc2 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008748:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800874c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874e:	2302      	movs	r3, #2
 8008750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008756:	2300      	movs	r3, #0
 8008758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800875a:	230a      	movs	r3, #10
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800875e:	f107 0314 	add.w	r3, r7, #20
 8008762:	4619      	mov	r1, r3
 8008764:	4812      	ldr	r0, [pc, #72]	; (80087b0 <HAL_HCD_MspInit+0xc0>)
 8008766:	f7f8 fdb1 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800876a:	4b10      	ldr	r3, [pc, #64]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 800876c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876e:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 8008770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008774:	6353      	str	r3, [r2, #52]	; 0x34
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	4a0b      	ldr	r2, [pc, #44]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 8008780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008784:	6453      	str	r3, [r2, #68]	; 0x44
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <HAL_HCD_MspInit+0xbc>)
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	2100      	movs	r1, #0
 8008796:	2043      	movs	r0, #67	; 0x43
 8008798:	f7f8 fd61 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800879c:	2043      	movs	r0, #67	; 0x43
 800879e:	f7f8 fd7a 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087a2:	bf00      	nop
 80087a4:	3728      	adds	r7, #40	; 0x28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40023800 	.word	0x40023800
 80087b0:	40020000 	.word	0x40020000

080087b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe ffeb 	bl	800779e <USBH_LL_IncTimer>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff f823 	bl	800782a <USBH_LL_Connect>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f82c 	bl	8007858 <USBH_LL_Disconnect>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
 8008814:	4613      	mov	r3, r2
 8008816:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe ffdd 	bl	80077f2 <USBH_LL_PortEnabled>
}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe ffdd 	bl	800780e <USBH_LL_PortDisabled>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800886a:	2b01      	cmp	r3, #1
 800886c:	d12a      	bne.n	80088c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800886e:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <USBH_LL_Init+0x74>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a15      	ldr	r2, [pc, #84]	; (80088d0 <USBH_LL_Init+0x74>)
 800887a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <USBH_LL_Init+0x74>)
 8008880:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008884:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <USBH_LL_Init+0x74>)
 8008888:	2208      	movs	r2, #8
 800888a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <USBH_LL_Init+0x74>)
 800888e:	2201      	movs	r2, #1
 8008890:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <USBH_LL_Init+0x74>)
 8008894:	2200      	movs	r2, #0
 8008896:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <USBH_LL_Init+0x74>)
 800889a:	2202      	movs	r2, #2
 800889c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <USBH_LL_Init+0x74>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80088a4:	480a      	ldr	r0, [pc, #40]	; (80088d0 <USBH_LL_Init+0x74>)
 80088a6:	f7f8 fede 	bl	8001666 <HAL_HCD_Init>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80088b0:	f7f8 f918 	bl	8000ae4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80088b4:	4806      	ldr	r0, [pc, #24]	; (80088d0 <USBH_LL_Init+0x74>)
 80088b6:	f7f9 fac2 	bl	8001e3e <HAL_HCD_GetCurrentFrame>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fe ff5e 	bl	8007780 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200005b8 	.word	0x200005b8

080088d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7f9 fa31 	bl	8001d52 <HAL_HCD_Start>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f95c 	bl	8008bb4 <USBH_Get_USB_Status>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008900:	7bbb      	ldrb	r3, [r7, #14]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008920:	4618      	mov	r0, r3
 8008922:	f7f9 fa39 	bl	8001d98 <HAL_HCD_Stop>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f941 	bl	8008bb4 <USBH_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008936:	7bbb      	ldrb	r3, [r7, #14]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008952:	4618      	mov	r0, r3
 8008954:	f7f9 fa81 	bl	8001e5a <HAL_HCD_GetCurrentSpeed>
 8008958:	4603      	mov	r3, r0
 800895a:	2b02      	cmp	r3, #2
 800895c:	d00c      	beq.n	8008978 <USBH_LL_GetSpeed+0x38>
 800895e:	2b02      	cmp	r3, #2
 8008960:	d80d      	bhi.n	800897e <USBH_LL_GetSpeed+0x3e>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <USBH_LL_GetSpeed+0x2c>
 8008966:	2b01      	cmp	r3, #1
 8008968:	d003      	beq.n	8008972 <USBH_LL_GetSpeed+0x32>
 800896a:	e008      	b.n	800897e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	e008      	b.n	8008984 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008972:	2301      	movs	r3, #1
 8008974:	73fb      	strb	r3, [r7, #15]
    break;
 8008976:	e005      	b.n	8008984 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008978:	2302      	movs	r3, #2
 800897a:	73fb      	strb	r3, [r7, #15]
    break;
 800897c:	e002      	b.n	8008984 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800897e:	2301      	movs	r3, #1
 8008980:	73fb      	strb	r3, [r7, #15]
    break;
 8008982:	bf00      	nop
  }
  return  speed;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f9 fa14 	bl	8001dd2 <HAL_HCD_ResetPort>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f8ff 	bl	8008bb4 <USBH_Get_USB_Status>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f9 fa1b 	bl	8001e16 <HAL_HCD_HC_GetXferCount>
 80089e0:	4603      	mov	r3, r0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089ea:	b590      	push	{r4, r7, lr}
 80089ec:	b089      	sub	sp, #36	; 0x24
 80089ee:	af04      	add	r7, sp, #16
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	461a      	mov	r2, r3
 80089f8:	4603      	mov	r3, r0
 80089fa:	70fb      	strb	r3, [r7, #3]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70bb      	strb	r3, [r7, #2]
 8008a00:	4613      	mov	r3, r2
 8008a02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a12:	787c      	ldrb	r4, [r7, #1]
 8008a14:	78ba      	ldrb	r2, [r7, #2]
 8008a16:	78f9      	ldrb	r1, [r7, #3]
 8008a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a1a:	9302      	str	r3, [sp, #8]
 8008a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4623      	mov	r3, r4
 8008a2a:	f7f8 fe7e 	bl	800172a <HAL_HCD_HC_Init>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f8bd 	bl	8008bb4 <USBH_Get_USB_Status>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd90      	pop	{r4, r7, pc}

08008a48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f8 feee 	bl	8001848 <HAL_HCD_HC_Halt>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f89e 	bl	8008bb4 <USBH_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a86:	b590      	push	{r4, r7, lr}
 8008a88:	b089      	sub	sp, #36	; 0x24
 8008a8a:	af04      	add	r7, sp, #16
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	70fb      	strb	r3, [r7, #3]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70bb      	strb	r3, [r7, #2]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008aae:	787c      	ldrb	r4, [r7, #1]
 8008ab0:	78ba      	ldrb	r2, [r7, #2]
 8008ab2:	78f9      	ldrb	r1, [r7, #3]
 8008ab4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4623      	mov	r3, r4
 8008aca:	f7f8 fee1 	bl	8001890 <HAL_HCD_HC_SubmitRequest>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f86d 	bl	8008bb4 <USBH_Get_USB_Status>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd90      	pop	{r4, r7, pc}

08008ae8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f9 f975 	bl	8001dee <HAL_HCD_HC_GetURBState>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d103      	bne.n	8008b2c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f870 	bl	8008c0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b2c:	20c8      	movs	r0, #200	; 0xc8
 8008b2e:	f7f8 fa97 	bl	8001060 <HAL_Delay>
  return USBH_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b52:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	212c      	movs	r1, #44	; 0x2c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	4413      	add	r3, r2
 8008b60:	333b      	adds	r3, #59	; 0x3b
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	212c      	movs	r1, #44	; 0x2c
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	3354      	adds	r3, #84	; 0x54
 8008b76:	78ba      	ldrb	r2, [r7, #2]
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	e008      	b.n	8008b8e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	212c      	movs	r1, #44	; 0x2c
 8008b82:	fb01 f303 	mul.w	r3, r1, r3
 8008b86:	4413      	add	r3, r2
 8008b88:	3355      	adds	r3, #85	; 0x55
 8008b8a:	78ba      	ldrb	r2, [r7, #2]
 8008b8c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7f8 fa5b 	bl	8001060 <HAL_Delay>
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d817      	bhi.n	8008bf8 <USBH_Get_USB_Status+0x44>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <USBH_Get_USB_Status+0x1c>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008be7 	.word	0x08008be7
 8008bd8:	08008bed 	.word	0x08008bed
 8008bdc:	08008bf3 	.word	0x08008bf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
    break;
 8008be4:	e00b      	b.n	8008bfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008be6:	2302      	movs	r3, #2
 8008be8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bea:	e008      	b.n	8008bfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf0:	e005      	b.n	8008bfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf6:	e002      	b.n	8008bfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfc:	bf00      	nop
  }
  return usb_status;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
 8008c24:	e001      	b.n	8008c2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008c26:	2301      	movs	r3, #1
 8008c28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4803      	ldr	r0, [pc, #12]	; (8008c40 <MX_DriverVbusFS+0x34>)
 8008c32:	f7f8 fcff 	bl	8001634 <HAL_GPIO_WritePin>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	40020800 	.word	0x40020800

08008c44 <malloc>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <malloc+0xc>)
 8008c46:	4601      	mov	r1, r0
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f000 b82b 	b.w	8008ca4 <_malloc_r>
 8008c4e:	bf00      	nop
 8008c50:	20000078 	.word	0x20000078

08008c54 <free>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <free+0xc>)
 8008c56:	4601      	mov	r1, r0
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f000 b8f3 	b.w	8008e44 <_free_r>
 8008c5e:	bf00      	nop
 8008c60:	20000078 	.word	0x20000078

08008c64 <sbrk_aligned>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	4e0e      	ldr	r6, [pc, #56]	; (8008ca0 <sbrk_aligned+0x3c>)
 8008c68:	460c      	mov	r4, r1
 8008c6a:	6831      	ldr	r1, [r6, #0]
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	b911      	cbnz	r1, 8008c76 <sbrk_aligned+0x12>
 8008c70:	f000 f8ac 	bl	8008dcc <_sbrk_r>
 8008c74:	6030      	str	r0, [r6, #0]
 8008c76:	4621      	mov	r1, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f000 f8a7 	bl	8008dcc <_sbrk_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	d00a      	beq.n	8008c98 <sbrk_aligned+0x34>
 8008c82:	1cc4      	adds	r4, r0, #3
 8008c84:	f024 0403 	bic.w	r4, r4, #3
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d007      	beq.n	8008c9c <sbrk_aligned+0x38>
 8008c8c:	1a21      	subs	r1, r4, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 f89c 	bl	8008dcc <_sbrk_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d101      	bne.n	8008c9c <sbrk_aligned+0x38>
 8008c98:	f04f 34ff 	mov.w	r4, #4294967295
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	200008c0 	.word	0x200008c0

08008ca4 <_malloc_r>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	1ccd      	adds	r5, r1, #3
 8008caa:	f025 0503 	bic.w	r5, r5, #3
 8008cae:	3508      	adds	r5, #8
 8008cb0:	2d0c      	cmp	r5, #12
 8008cb2:	bf38      	it	cc
 8008cb4:	250c      	movcc	r5, #12
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	4607      	mov	r7, r0
 8008cba:	db01      	blt.n	8008cc0 <_malloc_r+0x1c>
 8008cbc:	42a9      	cmp	r1, r5
 8008cbe:	d905      	bls.n	8008ccc <_malloc_r+0x28>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008da0 <_malloc_r+0xfc>
 8008cd0:	f000 f868 	bl	8008da4 <__malloc_lock>
 8008cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd8:	461c      	mov	r4, r3
 8008cda:	bb5c      	cbnz	r4, 8008d34 <_malloc_r+0x90>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7ff ffc0 	bl	8008c64 <sbrk_aligned>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	d155      	bne.n	8008d96 <_malloc_r+0xf2>
 8008cea:	f8d8 4000 	ldr.w	r4, [r8]
 8008cee:	4626      	mov	r6, r4
 8008cf0:	2e00      	cmp	r6, #0
 8008cf2:	d145      	bne.n	8008d80 <_malloc_r+0xdc>
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	d048      	beq.n	8008d8a <_malloc_r+0xe6>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	eb04 0903 	add.w	r9, r4, r3
 8008d02:	f000 f863 	bl	8008dcc <_sbrk_r>
 8008d06:	4581      	cmp	r9, r0
 8008d08:	d13f      	bne.n	8008d8a <_malloc_r+0xe6>
 8008d0a:	6821      	ldr	r1, [r4, #0]
 8008d0c:	1a6d      	subs	r5, r5, r1
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ffa7 	bl	8008c64 <sbrk_aligned>
 8008d16:	3001      	adds	r0, #1
 8008d18:	d037      	beq.n	8008d8a <_malloc_r+0xe6>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	442b      	add	r3, r5
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	f8d8 3000 	ldr.w	r3, [r8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d038      	beq.n	8008d9a <_malloc_r+0xf6>
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	42a2      	cmp	r2, r4
 8008d2c:	d12b      	bne.n	8008d86 <_malloc_r+0xe2>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	e00f      	b.n	8008d54 <_malloc_r+0xb0>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	1b52      	subs	r2, r2, r5
 8008d38:	d41f      	bmi.n	8008d7a <_malloc_r+0xd6>
 8008d3a:	2a0b      	cmp	r2, #11
 8008d3c:	d917      	bls.n	8008d6e <_malloc_r+0xca>
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	6025      	str	r5, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	6059      	strne	r1, [r3, #4]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	bf08      	it	eq
 8008d4c:	f8c8 1000 	streq.w	r1, [r8]
 8008d50:	5162      	str	r2, [r4, r5]
 8008d52:	604b      	str	r3, [r1, #4]
 8008d54:	4638      	mov	r0, r7
 8008d56:	f104 060b 	add.w	r6, r4, #11
 8008d5a:	f000 f829 	bl	8008db0 <__malloc_unlock>
 8008d5e:	f026 0607 	bic.w	r6, r6, #7
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	1af2      	subs	r2, r6, r3
 8008d66:	d0ae      	beq.n	8008cc6 <_malloc_r+0x22>
 8008d68:	1b9b      	subs	r3, r3, r6
 8008d6a:	50a3      	str	r3, [r4, r2]
 8008d6c:	e7ab      	b.n	8008cc6 <_malloc_r+0x22>
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	6862      	ldr	r2, [r4, #4]
 8008d72:	d1dd      	bne.n	8008d30 <_malloc_r+0x8c>
 8008d74:	f8c8 2000 	str.w	r2, [r8]
 8008d78:	e7ec      	b.n	8008d54 <_malloc_r+0xb0>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	6864      	ldr	r4, [r4, #4]
 8008d7e:	e7ac      	b.n	8008cda <_malloc_r+0x36>
 8008d80:	4634      	mov	r4, r6
 8008d82:	6876      	ldr	r6, [r6, #4]
 8008d84:	e7b4      	b.n	8008cf0 <_malloc_r+0x4c>
 8008d86:	4613      	mov	r3, r2
 8008d88:	e7cc      	b.n	8008d24 <_malloc_r+0x80>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f000 f80e 	bl	8008db0 <__malloc_unlock>
 8008d94:	e797      	b.n	8008cc6 <_malloc_r+0x22>
 8008d96:	6025      	str	r5, [r4, #0]
 8008d98:	e7dc      	b.n	8008d54 <_malloc_r+0xb0>
 8008d9a:	605b      	str	r3, [r3, #4]
 8008d9c:	deff      	udf	#255	; 0xff
 8008d9e:	bf00      	nop
 8008da0:	200008bc 	.word	0x200008bc

08008da4 <__malloc_lock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_lock+0x8>)
 8008da6:	f000 b84b 	b.w	8008e40 <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	20000a00 	.word	0x20000a00

08008db0 <__malloc_unlock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_unlock+0x8>)
 8008db2:	f000 b846 	b.w	8008e42 <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	20000a00 	.word	0x20000a00

08008dbc <memset>:
 8008dbc:	4402      	add	r2, r0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d100      	bne.n	8008dc6 <memset+0xa>
 8008dc4:	4770      	bx	lr
 8008dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dca:	e7f9      	b.n	8008dc0 <memset+0x4>

08008dcc <_sbrk_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	; (8008de8 <_sbrk_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f8 f85e 	bl	8000e98 <_sbrk>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_sbrk_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_sbrk_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200009fc 	.word	0x200009fc

08008dec <__errno>:
 8008dec:	4b01      	ldr	r3, [pc, #4]	; (8008df4 <__errno+0x8>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000078 	.word	0x20000078

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f000 f866 	bl	8008edc <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	08008f18 	.word	0x08008f18
 8008e34:	08008f18 	.word	0x08008f18
 8008e38:	08008f18 	.word	0x08008f18
 8008e3c:	08008f1c 	.word	0x08008f1c

08008e40 <__retarget_lock_acquire_recursive>:
 8008e40:	4770      	bx	lr

08008e42 <__retarget_lock_release_recursive>:
 8008e42:	4770      	bx	lr

08008e44 <_free_r>:
 8008e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e46:	2900      	cmp	r1, #0
 8008e48:	d044      	beq.n	8008ed4 <_free_r+0x90>
 8008e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e4e:	9001      	str	r0, [sp, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f1a1 0404 	sub.w	r4, r1, #4
 8008e56:	bfb8      	it	lt
 8008e58:	18e4      	addlt	r4, r4, r3
 8008e5a:	f7ff ffa3 	bl	8008da4 <__malloc_lock>
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <_free_r+0x94>)
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	b933      	cbnz	r3, 8008e74 <_free_r+0x30>
 8008e66:	6063      	str	r3, [r4, #4]
 8008e68:	6014      	str	r4, [r2, #0]
 8008e6a:	b003      	add	sp, #12
 8008e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e70:	f7ff bf9e 	b.w	8008db0 <__malloc_unlock>
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	d908      	bls.n	8008e8a <_free_r+0x46>
 8008e78:	6825      	ldr	r5, [r4, #0]
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf01      	itttt	eq
 8008e80:	6819      	ldreq	r1, [r3, #0]
 8008e82:	685b      	ldreq	r3, [r3, #4]
 8008e84:	1949      	addeq	r1, r1, r5
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	e7ed      	b.n	8008e66 <_free_r+0x22>
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	b10b      	cbz	r3, 8008e94 <_free_r+0x50>
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	d9fa      	bls.n	8008e8a <_free_r+0x46>
 8008e94:	6811      	ldr	r1, [r2, #0]
 8008e96:	1855      	adds	r5, r2, r1
 8008e98:	42a5      	cmp	r5, r4
 8008e9a:	d10b      	bne.n	8008eb4 <_free_r+0x70>
 8008e9c:	6824      	ldr	r4, [r4, #0]
 8008e9e:	4421      	add	r1, r4
 8008ea0:	1854      	adds	r4, r2, r1
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	6011      	str	r1, [r2, #0]
 8008ea6:	d1e0      	bne.n	8008e6a <_free_r+0x26>
 8008ea8:	681c      	ldr	r4, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	6053      	str	r3, [r2, #4]
 8008eae:	440c      	add	r4, r1
 8008eb0:	6014      	str	r4, [r2, #0]
 8008eb2:	e7da      	b.n	8008e6a <_free_r+0x26>
 8008eb4:	d902      	bls.n	8008ebc <_free_r+0x78>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	e7d6      	b.n	8008e6a <_free_r+0x26>
 8008ebc:	6825      	ldr	r5, [r4, #0]
 8008ebe:	1961      	adds	r1, r4, r5
 8008ec0:	428b      	cmp	r3, r1
 8008ec2:	bf04      	itt	eq
 8008ec4:	6819      	ldreq	r1, [r3, #0]
 8008ec6:	685b      	ldreq	r3, [r3, #4]
 8008ec8:	6063      	str	r3, [r4, #4]
 8008eca:	bf04      	itt	eq
 8008ecc:	1949      	addeq	r1, r1, r5
 8008ece:	6021      	streq	r1, [r4, #0]
 8008ed0:	6054      	str	r4, [r2, #4]
 8008ed2:	e7ca      	b.n	8008e6a <_free_r+0x26>
 8008ed4:	b003      	add	sp, #12
 8008ed6:	bd30      	pop	{r4, r5, pc}
 8008ed8:	200008bc 	.word	0x200008bc

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
